{"version":3,"sources":["D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.component.html","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.component.scss","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.component.ts","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.module.ts","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.routes.ts"],"names":[],"mappings":"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","file":"list.module.chunk.js","sourcesContent":["module.exports = \"<div class=\\\"text-center\\\" *ngIf=\\\"!(orders && orders.length)\\\">No Order Found.</div>\\r\\n<div *ngIf=\\\"orders && orders.length\\\" class=\\\"order-list-container\\\">\\r\\n    <div class=\\\"card order-list\\\" *ngFor=\\\"let order of orders\\\">\\r\\n        <div class=\\\"card-body\\\" [class.opacity]=\\\"order.status == 3\\\">\\r\\n            <h4 class=\\\"card-title\\\">\\r\\n                <div>\\r\\n                    <img src=\\\"assets/images/table.png\\\" alt=\\\"\\\">\\r\\n                    <span>{{order.tableName}}/<span class=\\\"order-number\\\">N.{{order.orderId}}</span></span>\\r\\n                </div>\\r\\n                <!-- <div class=\\\"status\\\" [class.bg-red]=\\\"order.status == 0\\\" [class.bg-green]=\\\"order.status == 2\\\" [class.bg-yellow]=\\\"order.status == 4\\\">{{getOrderStatus(order.status)}}</div> -->\\r\\n            </h4>\\r\\n            <div class=\\\"card-text\\\">\\r\\n                <p>\\r\\n                    <i class=\\\"fas fa-cube\\\"></i> {{order.room.name}}</p>\\r\\n                <p>\\r\\n                    <i class=\\\"far fa-clock\\\"></i>\\r\\n                    <span>{{order.created_at | date:'hh:mm a'}}</span>\\r\\n                </p>\\r\\n                <p>\\r\\n                    <i class=\\\"far fa-user\\\"></i> {{order.noOfPeople}}</p>\\r\\n            </div>\\r\\n            <div class=\\\"step-listing\\\">\\r\\n                <ul *ngIf=\\\"stepdata[order._id]\\\">\\r\\n                    <li *ngFor=\\\"let step of order.step; let i = index;\\\" (click)=\\\"selectedTab(step.step,i,order._id)\\\" [class.active]=\\\"step.step == stepdata[order._id].step\\\" [class.completed]=\\\"(itemStatusDelivered[order._id] && itemStatusDelivered[order._id][step.step]) || (step.step == 'Uscita 1')\\\">{{step.step}}</li>\\r\\n                </ul>\\r\\n            </div>\\r\\n            <div class=\\\"order-items-container\\\">\\r\\n                <div *ngFor=\\\"let step of order.step\\\">\\r\\n                    <div *ngFor=\\\"let item of step.itemId\\\">\\r\\n                        <div class=\\\"order-item\\\" *ngIf=\\\"stepdata[order._id] && item.step == stepdata[order._id].step\\\">\\r\\n                            <label class=\\\"label item-status\\\">{{getOrderStatus(item.status)}}</label>\\r\\n                            <div class=\\\"order-item-img\\\">\\r\\n                                {{item.quantity}} X\\r\\n                            </div>\\r\\n                            <div class=\\\"order-item-detail\\\">\\r\\n                                {{item.id.name}}\\r\\n                                <ul>\\r\\n                                    <li *ngFor=\\\"let varient of item.variant\\\">\\r\\n                                        <i *ngIf=\\\"varient.status == 1\\\">+</i>\\r\\n                                        <i *ngIf=\\\"varient.status == 0\\\">-</i> {{varient.name}}\\r\\n                                    </li>\\r\\n                                </ul>\\r\\n                                <ul>\\r\\n                                    <li>\\r\\n                                        {{item.notes}}\\r\\n                                    </li>\\r\\n                                </ul>\\r\\n                            </div>\\r\\n                            <div class=\\\"order-quantity d-flex\\\">\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"order-call-btn\\\" *ngIf=\\\"order.step.length\\\">\\r\\n            <div *ngFor=\\\"let step of order.step; let indx = index;\\\">\\r\\n                <div *ngIf=\\\"stepdata[order._id].step == step.step\\\">\\r\\n                    <button *ngIf=\\\"stepdata[order._id] && stepdata[order._id].step != 'Uscita 1' && itemStatusDelivered[order._id] && !itemStatusDelivered[order._id][step.step] && showToCall[order._id] && showToCall[order._id][step.step]\\\" type=\\\"submit\\\" (click)=\\\"changeStep(order, step.step)\\\">Call</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.component.html\n// module id = ../../../../../src/app/hirundo/waiter/list/list.component.html\n// module chunks = list.module","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.component.scss\n// module id = ../../../../../src/app/hirundo/waiter/list/list.component.scss\n// module chunks = list.module","// import { Component, OnInit, IterableDiffers, Input, DoCheck } from '@angular/core';\r\n// import { WebsocketService } from '../../../service/websocket.service';\r\n// import { Router } from '@angular/router';\r\n// import { GlobalService } from '../../global.service'\r\n// import { Observable } from 'rxjs/Observable';\r\n// import 'rxjs/Rx';\r\n// import *  as _ from 'lodash';\r\n\r\n// @Component({\r\n//     selector: 'app-list',\r\n//     templateUrl: './list.component.html',\r\n//     styleUrls: ['./list.component.scss']\r\n// })\r\n// export class ListComponent implements DoCheck {\r\n//     @Input() orders: Array<any> = [];\r\n//     differ: any;\r\n//     public loadingOrders: boolean = true;\r\n//     public steps: Array<any> = [];\r\n//     public activetab: boolean[] = [];\r\n//     public stepdata: Array<any> = [];\r\n//     public orderId: Array<any> = [];\r\n//     public times: Array<any> = [];    \r\n//     public showToCall: Array<any> = [];  \r\n//     constructor(public websocketService: WebsocketService, private globalService: GlobalService, public router: Router,private differs: IterableDiffers) {\r\n//         this.differ = differs.find([]).create(null);\r\n//      }\r\n\r\n//     ngOnInit() {\r\n//         this.websocketService.getWaiterOrders().then(data => {\r\n//             this.orders = data;\r\n//             if (this.orders.length) {\r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     let time = {};\r\n//                     let call = {};\r\n//                     for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                         let temp = [];\r\n//                         for (let l = 0; l < this.orders[i].item.length; l++) {\r\n//                             if (this.orders[i].item[l].step == this.orders[i].step[k].step && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\r\n//                                 temp.push(this.orders[i].item[l].id.preparationTime);\r\n//                             }\r\n//                         }\r\n//                         time[this.orders[i].step[k].step] = Math.max(...temp);\r\n//                         call[this.orders[i].step[k].step] = true;\r\n//                         if(this.orders[i].step[k].status == 1){\r\n//                             let temparray = this.orders[i].step[k].step.split(' ');\r\n//                             let num = Number(temparray[1]);\r\n//                             let stepTemp = temparray[0]+' '+ ++num;\r\n//                             let temp = {\r\n//                                 tab: num,\r\n//                                 step: stepTemp,\r\n//                             }\r\n//                             this.stepdata[this.orders[i]._id] = temp;\r\n//                         }else{\r\n//                             let tempp = {\r\n//                                 tab: 0,\r\n//                                 step: ''\r\n//                             }\r\n//                             if(this.orders[i].step.length>1){\r\n//                                 tempp.tab = 1;\r\n//                                 tempp.step = this.orders[i].step[1].step;\r\n//                             }\r\n//                             else{\r\n//                                 tempp.tab = 0;\r\n//                                 tempp.step = this.orders[i].step[0].step;\r\n//                             }\r\n//                             this.stepdata[this.orders[i]._id] = tempp;\r\n//                         }\r\n                        \r\n//                     }\r\n//                     this.times[this.orders[i]._id] = time;\r\n//                     this.showToCall[this.orders[i]._id] = call;\r\n//                 }\r\n//             }\r\n//             this.loadingOrders = false;\r\n//         })\r\n//             .catch(error => {\r\n//             });\r\n//     }\r\n\r\n//     public getOrderStatus(status) {\r\n//         var str = 'In progress';\r\n//         switch (status) {\r\n//             case 0:\r\n//                 str = 'New order'; break;\r\n//             case 1:\r\n//                 str = 'Delivered'; break;\r\n//             case 2:\r\n//                 str = 'Prepared'; break;\r\n//             case 3:\r\n//                 str = 'Cancelled'; break;\r\n//             case 4:\r\n//                 str = 'In progress'; break;\r\n//             default:\r\n//                 break;\r\n//         }\r\n\r\n//         return str;\r\n//     };\r\n\r\n//     public updateOrder(order, status) {\r\n//         order.status = status;\r\n//         let items = [];\r\n//         for (let i = 0; i < order.item.length; i++) {\r\n//             items.push(order.item[i].id._id)\r\n//         }\r\n//         let opts = {\r\n//             status: status,\r\n//             itemId: items\r\n//         };\r\n//         this.websocketService.updateOrder(order._id, opts).then(data => {\r\n//         }).catch(error => {\r\n//         });\r\n//     };\r\n\r\n//     public updateItem(item, order, status) {\r\n//         item.status = status;\r\n//         let items = [];\r\n//         items.push(item.id._id)\r\n//         let opts = {\r\n//             status: status,\r\n//             itemId: items\r\n//         };\r\n//         this.websocketService.updateWaiterOrder(order, opts).then(data => {\r\n//         }).catch(error => {\r\n//         });\r\n//     };\r\n\r\n\r\n//     public changeStep(order, step, stepKey) {\r\n//         let items = [];\r\n//         let opts = {\r\n//             step: step\r\n//         };\r\n//         this.websocketService.changeOrderStep(order._id, opts).then(data => {\r\n//             this.showToCall[order._id][stepKey] = false;   \r\n//         }).catch(error => {\r\n//         });\r\n//     };\r\n\r\n//     selectedTab(step, tab, orderId) {        \r\n//         let temp = {\r\n//             tab: tab,\r\n//             step: step\r\n//         }\r\n//         this.stepdata[orderId] = temp;\r\n//     }\r\n\r\n//     ngDoCheck() {\r\n//         if(this.orders && this.orders.length){\r\n//             const change = this.differ.diff(this.orders);\r\n//             if(change != null){\r\n//                 if (this.orders.length) {\r\n//                     for (let i = 0; i < this.orders.length; i++) {\r\n//                         let time = {};\r\n//                         let call = {};                    \r\n//                         for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                             let temp = [];\r\n//                             for (let l = 0; l < this.orders[i].item.length; l++) {\r\n//                                 if (this.orders[i].item[l].step == this.orders[i].step[k].step && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\r\n//                                     temp.push(this.orders[i].item[l].id.preparationTime);\r\n//                                 }\r\n//                             }\r\n//                             time[this.orders[i].step[k].step] = Math.max(...temp);\r\n//                             call[this.orders[i].step[k].step] = true;                        \r\n//                             let tempp = {\r\n//                                 tab: 0,\r\n//                                 step: ''\r\n//                             }\r\n//                             if(this.orders[i].step.length>1){\r\n//                                 tempp.tab = 1;\r\n//                                 tempp.step = this.orders[i].step[1].step;\r\n//                             }\r\n//                             else{\r\n//                                 tempp.tab = 0;\r\n//                                 tempp.step = this.orders[i].step[0].step;\r\n//                             }\r\n//                             this.stepdata[this.orders[i]._id] = tempp;\r\n//                         }\r\n//                         this.times[this.orders[i]._id] = time;\r\n//                         this.showToCall[this.orders[i]._id] = call;                    \r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n       \r\n//     }\r\n// }\r\n\r\nimport { Component, OnInit, IterableDiffers, Input, DoCheck } from '@angular/core';\r\nimport { WebsocketService } from '../../../service/websocket.service';\r\nimport { Router } from '@angular/router';\r\nimport { GlobalService } from '../../global.service'\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/Rx';\r\nimport *  as _ from 'lodash';\r\n\r\n@Component({\r\n    selector: 'app-list',\r\n    templateUrl: './list.component.html',\r\n    styleUrls: ['./list.component.scss']\r\n})\r\nexport class ListComponent implements DoCheck {\r\n    @Input() orders: Array<any> = [];\r\n    differ: any;\r\n    public loadingOrders: boolean = true;\r\n    public stepdata: Array<any> = [];\r\n    public itemStatusDelivered: Array<any> = [];\r\n    public showToCall: Array<any> = [];  \r\n    \r\n    constructor(public websocketService: WebsocketService, private globalService: GlobalService, public router: Router,private differs: IterableDiffers) {\r\n        this.differ = differs.find([]).create(null);\r\n     }\r\n\r\n    ngOnInit() {\r\n        this.websocketService.getWaiterOrders().then(data => {\r\n            this.orders = data;\r\n            if (this.orders.length) {\r\n                this.itemStatusDelivered = [];\r\n                for (let i = 0; i < this.orders.length; i++) {\r\n                    let itemStatusDelivered = {};\r\n                    let call = {};                    \r\n                    for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                        let startTemp = [];                        \r\n                        for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\r\n                            startTemp.push(this.orders[i].step[k].itemId[l].status);\r\n                        }\r\n                        itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n                        call[this.orders[i].step[k].step] = true;                        \r\n                        // if (startTemp.every(this.isEqualToOne)) {\r\n                        //     let temparray = this.orders[i].step[k].step.split(' ');\r\n                        //     let num = Number(temparray[1]);\r\n                        //     let stepTemp = temparray[0] + ' ' + ++num;\r\n                        //     let temp = {\r\n                        //         tab: Number(temparray[1]),\r\n                        //         step: stepTemp,\r\n                        //     }\r\n                        //     this.stepdata[this.orders[i]._id] = temp;\r\n                        // } else {\r\n                        //     let tempp = {\r\n                        //         tab: 0,\r\n                        //         step: ''\r\n                        //     }\r\n                        //     if(this.orders[i].step.length>1){\r\n                        //         tempp.tab = 1;\r\n                        //         tempp.step = this.orders[i].step[1].step;\r\n                        //     }\r\n                        //     else{\r\n                        //         tempp.tab = 0;\r\n                        //         tempp.step = this.orders[i].step[0].step;\r\n                        //     }\r\n                        //     this.stepdata[this.orders[i]._id] = tempp;\r\n                        // }\r\n                    }\r\n                    this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \r\n                    this.showToCall[this.orders[i]._id] = call;  \r\n                    console.log('this.itemStatusDelivered',this.itemStatusDelivered);\r\n                    if(this.orders[i].step.length>2){\r\n                        for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                            if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n                                console.log('this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m]]',this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]);\r\n                                if(this.orders[i].step[m].step != 'Uscita 1'){\r\n                                    let temparray = this.orders[i].step[m].step.split(' ');\r\n                                    console.log('temparray',temparray);\r\n                                    let num = Number(temparray[1]);\r\n                                    let temp = {\r\n                                        tab: num - 1,\r\n                                        step: this.orders[i].step[m].step,\r\n                                    }\r\n                                    console.log('temp',temp);\r\n                                    this.stepdata[this.orders[i]._id] = temp;\r\n                                    console.log('this.stepdata',this.stepdata);\r\n                                    break;\r\n                                }\r\n                                else{\r\n                                    let temp = {\r\n                                        tab: 1,\r\n                                        step: this.orders[i].step[1].step,\r\n                                    }\r\n                                    console.log('temp',temp);\r\n                                    this.stepdata[this.orders[i]._id] = temp;\r\n                                    console.log('this.stepdata',this.stepdata);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if(this.orders[i].step.length == 2){\r\n                        let tempp = {\r\n                            tab: 1,\r\n                            step: this.orders[i].step[1].step\r\n                        }\r\n                        this.stepdata[this.orders[i]._id] = tempp;\r\n                    }\r\n                    if(this.orders[i].step.length == 1){\r\n                        let tempp = {\r\n                            tab: 0,\r\n                            step: this.orders[i].step[0].step\r\n                        }\r\n                        this.stepdata[this.orders[i]._id] = tempp;\r\n                    }               \r\n                }\r\n            }\r\n            this.loadingOrders = false;\r\n        })\r\n            .catch(error => {\r\n            });\r\n    }\r\n\r\n    isEqualToOne(currentValue) {\r\n        return currentValue == 1;\r\n    };\r\n\r\n    public getOrderStatus(status) {\r\n        var str = 'In progress';\r\n        switch (status) {\r\n            case 0:\r\n                str = 'New order'; break;\r\n            case 1:\r\n                str = 'Delivered'; break;\r\n            case 2:\r\n                str = 'Prepared'; break;\r\n            case 3:\r\n                str = 'Cancelled'; break;\r\n            case 4:\r\n                str = 'In progress'; break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return str;\r\n    };\r\n\r\n    public changeStep(order, step) {\r\n        let items = [];\r\n        let opts = {\r\n            step: step\r\n        };\r\n        this.websocketService.changeOrderStep(order._id, opts).then(data => {\r\n            this.showToCall[order._id][step] = false;               \r\n            if (this.orders.length) {\r\n                this.itemStatusDelivered = [];\r\n                for (let i = 0; i < this.orders.length; i++) {\r\n                    let itemStatusDelivered = {};\r\n                    for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                        let startTemp = [];                        \r\n                        for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\r\n                            startTemp.push(this.orders[i].step[k].itemId[l].status);\r\n                        }\r\n                        itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n                    }\r\n                    this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \r\n                }\r\n            }\r\n        }).catch(error => {\r\n        });\r\n    };\r\n\r\n    selectedTab(step, tab, orderId) {        \r\n        let temp = {\r\n            tab: tab,\r\n            step: step\r\n        }\r\n        this.stepdata[orderId] = temp;\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if(this.orders && this.orders.length){\r\n            const change = this.differ.diff(this.orders);\r\n            if(change != null){\r\n                if (this.orders.length) {\r\n                    this.itemStatusDelivered = [];\r\n                    for (let i = 0; i < this.orders.length; i++) {\r\n                        let itemStatusDelivered = {};\r\n                        let call = {};                                            \r\n                        for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                            let startTemp = [];                        \r\n                            for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\r\n                                startTemp.push(this.orders[i].step[k].itemId[l].status);\r\n                            }\r\n                            itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n                            call[this.orders[i].step[k].step] = true;                                                    \r\n                            // if (startTemp.every(this.isEqualToOne)) {\r\n                            //     let temparray = this.orders[i].step[k].step.split(' ');\r\n                            //     let num = Number(temparray[1]);\r\n                            //     let stepTemp = temparray[0] + ' ' + ++num;\r\n                            //     let temp = {\r\n                            //         tab: Number(temparray[1]),\r\n                            //         step: stepTemp,\r\n                            //     }\r\n                            //     this.stepdata[this.orders[i]._id] = temp;\r\n                            // } else {\r\n                            //     let tempp = {\r\n                            //         tab: 0,\r\n                            //         step: ''\r\n                            //     }\r\n                            //     if(this.orders[i].step.length>1){\r\n                            //         tempp.tab = 1;\r\n                            //         tempp.step = this.orders[i].step[1].step;\r\n                            //     }\r\n                            //     else{\r\n                            //         tempp.tab = 0;\r\n                            //         tempp.step = this.orders[i].step[0].step;\r\n                            //     }\r\n                            //     this.stepdata[this.orders[i]._id] = tempp;\r\n                            // }\r\n                        }\r\n                        this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \r\n                        this.showToCall[this.orders[i]._id] = call;  \r\n                        if(this.orders[i].step.length>2){\r\n                            for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                                if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n                                    console.log('this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m]]',this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]);\r\n                                    if(this.orders[i].step[m].step != 'Uscita 1'){\r\n                                        let temparray = this.orders[i].step[m].step.split(' ');\r\n                                        console.log('temparray',temparray);\r\n                                        let num = Number(temparray[1]);\r\n                                        let temp = {\r\n                                            tab: num - 1,\r\n                                            step: this.orders[i].step[m].step,\r\n                                        }\r\n                                        console.log('temp',temp);\r\n                                        this.stepdata[this.orders[i]._id] = temp;\r\n                                        console.log('this.stepdata',this.stepdata);\r\n                                        break;\r\n                                    }\r\n                                    else{\r\n                                        let temp = {\r\n                                            tab: 1,\r\n                                            step: this.orders[i].step[1].step,\r\n                                        }\r\n                                        console.log('temp',temp);\r\n                                        this.stepdata[this.orders[i]._id] = temp;\r\n                                        console.log('this.stepdata',this.stepdata);\r\n                                        break;\r\n                                    } \r\n                                }\r\n                            }\r\n                        }\r\n                        if(this.orders[i].step.length == 2){\r\n                            let tempp = {\r\n                                tab: 1,\r\n                                step: this.orders[i].step[1].step\r\n                            }\r\n                            this.stepdata[this.orders[i]._id] = tempp;\r\n                        }\r\n                        if(this.orders[i].step.length == 1){\r\n                            let tempp = {\r\n                                tab: 0,\r\n                                step: this.orders[i].step[0].step\r\n                            }\r\n                            this.stepdata[this.orders[i]._id] = tempp;\r\n                        }                                          \r\n                    }\r\n                }\r\n            }\r\n        }\r\n       \r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.component.ts","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ListComponent } from './list.component';\r\nimport { ListRouting } from './list.routes'\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ListRouting\r\n  ],\r\n  declarations: [ListComponent]\r\n})\r\nexport class ListModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.module.ts","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ListComponent } from './list.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: ListComponent }\r\n];\r\n\r\n\r\nexport const ListRouting: ModuleWithProviders = RouterModule.forChild(routes); \r\n\n\n\n// WEBPACK FOOTER //\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/waiter/list/list.routes.ts"],"sourceRoot":"webpack:///"}