{"version":3,"sources":["/home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.component.html","/home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.component.scss","/home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.component.ts","/home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.module.ts","/home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.routes.ts"],"names":[],"mappings":"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","file":"list.module.chunk.js","sourcesContent":["module.exports = \"<div class=\\\"text-center\\\" *ngIf=\\\"!(orders && orders.length)\\\">No Order Found.</div>\\n<div *ngIf=\\\"orders && orders.length\\\" class=\\\"order-list-container\\\">\\n    <!-- <div *ngIf=\\\"orders && orders.length\\\"> -->\\n    <div class=\\\"card order-list\\\" *ngFor=\\\"let order of orders\\\">\\n        <div class=\\\"card-body\\\" [class.opacity]=\\\"order.status == 3\\\">\\n            <h4 class=\\\"card-title\\\">\\n                <div>\\n                    <img src=\\\"assets/images/table.png\\\" alt=\\\"\\\">\\n                    <span>{{order.tableName}}</span>\\n                </div>\\n                <div class=\\\"status\\\" [class.bg-red]=\\\"order.status == 0\\\" [class.bg-green]=\\\"order.status == 2\\\" [class.bg-yellow]=\\\"order.status == 4\\\">{{getOrderStatus(order.status)}}</div>\\n            </h4>\\n            <div class=\\\"card-text\\\">\\n                <p>\\n                    <i class=\\\"fas fa-cube\\\"></i> {{order.room.name}}</p>\\n                <p>\\n                    <i class=\\\"far fa-clock\\\"></i>\\n                    <span>{{order.created_at | date:'hh:mm a'}}</span>\\n                </p>\\n                <p>\\n                    <i class=\\\"far fa-user\\\"></i> {{order.noOfPeople}}</p>\\n            </div>\\n            <div class=\\\"step-listing\\\">\\n                <ul *ngIf=\\\"stepdata[order._id]\\\">\\n                    <li *ngFor=\\\"let step of order.step; let i = index;\\\" (click)=\\\"selectedTab(step.step,i,order._id)\\\" [class.active]=\\\"step.step == stepdata[order._id].step\\\" [class.completed]=\\\"itemStatusDelivered[order._id] && itemStatusDelivered[order._id][step.step] || step.step == 'Uscita 1'\\\">{{step.step}}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"order-items-container\\\">\\n                <div *ngFor=\\\"let step of order.step\\\">\\n                    <div *ngFor=\\\"let item of step.itemId\\\">\\n                        <div class=\\\"order-item\\\" *ngIf=\\\"stepdata[order._id] && item.step == stepdata[order._id].step\\\">\\n                            <label class=\\\"label item-status\\\">{{getOrderStatus(item.status)}}</label>\\n                            <div class=\\\"order-item-img\\\">\\n                                {{item.quantity}} X\\n                            </div>\\n                            <div class=\\\"order-item-detail\\\">\\n                                {{item.id.name}}\\n                                <ul>\\n                                    <li *ngFor=\\\"let varient of item.variant\\\">\\n                                        <i *ngIf=\\\"varient.status == 1\\\">+</i>\\n                                        <i *ngIf=\\\"varient.status == 0\\\">-</i> {{varient.name}}\\n                                    </li>\\n                                </ul>\\n                                <ul>\\n                                    <li>\\n                                        {{item.notes}}\\n                                    </li>\\n                                </ul>\\n                            </div>\\n                            <div class=\\\"order-quantity d-flex\\\">\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"order-call-btn\\\" *ngIf=\\\"order.step.length\\\">\\n            <div *ngFor=\\\"let step of order.step; let indx = index;\\\">\\n                <div *ngIf=\\\"stepdata[order._id].step == step.step\\\">\\n                    <button *ngIf=\\\"stepdata[order._id] && stepdata[order._id].step != 'Uscita 1' && itemStatusDelivered[order._id] && !itemStatusDelivered[order._id][step.step]\\\" type=\\\"submit\\\" (click)=\\\"changeStep(order, step.step)\\\">Call</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <!-- </div> -->\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.component.html\n// module id = ../../../../../src/app/hirundo/waiter/list/list.component.html\n// module chunks = list.module","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.component.scss\n// module id = ../../../../../src/app/hirundo/waiter/list/list.component.scss\n// module chunks = list.module","// import { Component, OnInit, IterableDiffers, Input, DoCheck } from '@angular/core';\n// import { WebsocketService } from '../../../service/websocket.service';\n// import { Router } from '@angular/router';\n// import { GlobalService } from '../../global.service'\n// import { Observable } from 'rxjs/Observable';\n// import 'rxjs/Rx';\n// import *  as _ from 'lodash';\n\n// @Component({\n//     selector: 'app-list',\n//     templateUrl: './list.component.html',\n//     styleUrls: ['./list.component.scss']\n// })\n// export class ListComponent implements DoCheck {\n//     @Input() orders: Array<any> = [];\n//     differ: any;\n//     public loadingOrders: boolean = true;\n//     public steps: Array<any> = [];\n//     public activetab: boolean[] = [];\n//     public stepdata: Array<any> = [];\n//     public orderId: Array<any> = [];\n//     public times: Array<any> = [];    \n//     public showToCall: Array<any> = [];  \n//     constructor(public websocketService: WebsocketService, private globalService: GlobalService, public router: Router,private differs: IterableDiffers) {\n//         this.differ = differs.find([]).create(null);\n//      }\n\n//     ngOnInit() {\n//         this.websocketService.getWaiterOrders().then(data => {\n//             this.orders = data;\n//             if (this.orders.length) {\n//                 for (let i = 0; i < this.orders.length; i++) {\n//                     let time = {};\n//                     let call = {};\n//                     for (let k = 0; k < this.orders[i].step.length; k++) {\n//                         let temp = [];\n//                         for (let l = 0; l < this.orders[i].item.length; l++) {\n//                             if (this.orders[i].item[l].step == this.orders[i].step[k].step && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\n//                                 temp.push(this.orders[i].item[l].id.preparationTime);\n//                             }\n//                         }\n//                         time[this.orders[i].step[k].step] = Math.max(...temp);\n//                         call[this.orders[i].step[k].step] = true;\n//                         if(this.orders[i].step[k].status == 1){\n//                             let temparray = this.orders[i].step[k].step.split(' ');\n//                             let num = Number(temparray[1]);\n//                             let stepTemp = temparray[0]+' '+ ++num;\n//                             let temp = {\n//                                 tab: num,\n//                                 step: stepTemp,\n//                             }\n//                             this.stepdata[this.orders[i]._id] = temp;\n//                         }else{\n//                             let tempp = {\n//                                 tab: 0,\n//                                 step: ''\n//                             }\n//                             if(this.orders[i].step.length>1){\n//                                 tempp.tab = 1;\n//                                 tempp.step = this.orders[i].step[1].step;\n//                             }\n//                             else{\n//                                 tempp.tab = 0;\n//                                 tempp.step = this.orders[i].step[0].step;\n//                             }\n//                             this.stepdata[this.orders[i]._id] = tempp;\n//                         }\n                        \n//                     }\n//                     this.times[this.orders[i]._id] = time;\n//                     this.showToCall[this.orders[i]._id] = call;\n//                 }\n//             }\n//             this.loadingOrders = false;\n//         })\n//             .catch(error => {\n//             });\n//     }\n\n//     public getOrderStatus(status) {\n//         var str = 'In progress';\n//         switch (status) {\n//             case 0:\n//                 str = 'New order'; break;\n//             case 1:\n//                 str = 'Delivered'; break;\n//             case 2:\n//                 str = 'Prepared'; break;\n//             case 3:\n//                 str = 'Cancelled'; break;\n//             case 4:\n//                 str = 'In progress'; break;\n//             default:\n//                 break;\n//         }\n\n//         return str;\n//     };\n\n//     public updateOrder(order, status) {\n//         order.status = status;\n//         let items = [];\n//         for (let i = 0; i < order.item.length; i++) {\n//             items.push(order.item[i].id._id)\n//         }\n//         let opts = {\n//             status: status,\n//             itemId: items\n//         };\n//         this.websocketService.updateOrder(order._id, opts).then(data => {\n//         }).catch(error => {\n//         });\n//     };\n\n//     public updateItem(item, order, status) {\n//         item.status = status;\n//         let items = [];\n//         items.push(item.id._id)\n//         let opts = {\n//             status: status,\n//             itemId: items\n//         };\n//         this.websocketService.updateWaiterOrder(order, opts).then(data => {\n//         }).catch(error => {\n//         });\n//     };\n\n\n//     public changeStep(order, step, stepKey) {\n//         let items = [];\n//         let opts = {\n//             step: step\n//         };\n//         this.websocketService.changeOrderStep(order._id, opts).then(data => {\n//             this.showToCall[order._id][stepKey] = false;   \n//         }).catch(error => {\n//         });\n//     };\n\n//     selectedTab(step, tab, orderId) {        \n//         let temp = {\n//             tab: tab,\n//             step: step\n//         }\n//         this.stepdata[orderId] = temp;\n//     }\n\n//     ngDoCheck() {\n//         if(this.orders && this.orders.length){\n//             const change = this.differ.diff(this.orders);\n//             if(change != null){\n//                 if (this.orders.length) {\n//                     for (let i = 0; i < this.orders.length; i++) {\n//                         let time = {};\n//                         let call = {};                    \n//                         for (let k = 0; k < this.orders[i].step.length; k++) {\n//                             let temp = [];\n//                             for (let l = 0; l < this.orders[i].item.length; l++) {\n//                                 if (this.orders[i].item[l].step == this.orders[i].step[k].step && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\n//                                     temp.push(this.orders[i].item[l].id.preparationTime);\n//                                 }\n//                             }\n//                             time[this.orders[i].step[k].step] = Math.max(...temp);\n//                             call[this.orders[i].step[k].step] = true;                        \n//                             let tempp = {\n//                                 tab: 0,\n//                                 step: ''\n//                             }\n//                             if(this.orders[i].step.length>1){\n//                                 tempp.tab = 1;\n//                                 tempp.step = this.orders[i].step[1].step;\n//                             }\n//                             else{\n//                                 tempp.tab = 0;\n//                                 tempp.step = this.orders[i].step[0].step;\n//                             }\n//                             this.stepdata[this.orders[i]._id] = tempp;\n//                         }\n//                         this.times[this.orders[i]._id] = time;\n//                         this.showToCall[this.orders[i]._id] = call;                    \n//                     }\n//                 }\n//             }\n//         }\n       \n//     }\n// }\n\nimport { Component, OnInit, IterableDiffers, Input, DoCheck } from '@angular/core';\nimport { WebsocketService } from '../../../service/websocket.service';\nimport { Router } from '@angular/router';\nimport { GlobalService } from '../../global.service'\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/Rx';\nimport *  as _ from 'lodash';\n\n@Component({\n    selector: 'app-list',\n    templateUrl: './list.component.html',\n    styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements DoCheck {\n    @Input() orders: Array<any> = [];\n    differ: any;\n    public loadingOrders: boolean = true;\n    public stepdata: Array<any> = [];\n    public itemStatusDelivered: Array<any> = [];\n    constructor(public websocketService: WebsocketService, private globalService: GlobalService, public router: Router,private differs: IterableDiffers) {\n        this.differ = differs.find([]).create(null);\n     }\n\n    ngOnInit() {\n        this.websocketService.getWaiterOrders().then(data => {\n            this.orders = data;\n            if (this.orders.length) {\n                this.itemStatusDelivered = [];\n                for (let i = 0; i < this.orders.length; i++) {\n                    let itemStatusDelivered = {};\n                    for (let k = 0; k < this.orders[i].step.length; k++) {\n                        let startTemp = [];                        \n                        for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\n                            startTemp.push(this.orders[i].step[k].itemId[l].status);\n                        }\n                        itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\n                        if (startTemp.every(this.isEqualToOne)) {\n                            let temparray = this.orders[i].step[k].step.split(' ');\n                            let num = Number(temparray[1]);\n                            let stepTemp = temparray[0] + ' ' + ++num;\n                            let temp = {\n                                tab: num,\n                                step: stepTemp,\n                            }\n                            this.stepdata[this.orders[i]._id] = temp;\n                        } else {\n                            let tempp = {\n                                tab: 0,\n                                step: ''\n                            }\n                            if(this.orders[i].step.length>1){\n                                tempp.tab = 1;\n                                tempp.step = this.orders[i].step[1].step;\n                            }\n                            else{\n                                tempp.tab = 0;\n                                tempp.step = this.orders[i].step[0].step;\n                            }\n                            this.stepdata[this.orders[i]._id] = tempp;\n                        }\n                    }\n                    this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \n                }\n            }\n            this.loadingOrders = false;\n        })\n            .catch(error => {\n            });\n    }\n\n    isEqualToOne(currentValue) {\n        return currentValue == 1;\n    };\n\n    public getOrderStatus(status) {\n        var str = 'In progress';\n        switch (status) {\n            case 0:\n                str = 'New order'; break;\n            case 1:\n                str = 'Delivered'; break;\n            case 2:\n                str = 'Prepared'; break;\n            case 3:\n                str = 'Cancelled'; break;\n            case 4:\n                str = 'In progress'; break;\n            default:\n                break;\n        }\n\n        return str;\n    };\n\n    public changeStep(order, step) {\n        let items = [];\n        let opts = {\n            step: step\n        };\n        this.websocketService.changeOrderStep(order._id, opts).then(data => {\n            if (this.orders.length) {\n                this.itemStatusDelivered = [];\n                for (let i = 0; i < this.orders.length; i++) {\n                    let itemStatusDelivered = {};\n                    for (let k = 0; k < this.orders[i].step.length; k++) {\n                        let startTemp = [];                        \n                        for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\n                            startTemp.push(this.orders[i].step[k].itemId[l].status);\n                        }\n                        itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\n                    }\n                    this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \n                }\n            }\n        }).catch(error => {\n        });\n    };\n\n    selectedTab(step, tab, orderId) {        \n        let temp = {\n            tab: tab,\n            step: step\n        }\n        this.stepdata[orderId] = temp;\n    }\n\n    ngDoCheck() {\n        if(this.orders && this.orders.length){\n            const change = this.differ.diff(this.orders);\n            if(change != null){\n                if (this.orders.length) {\n                    this.itemStatusDelivered = [];\n                    for (let i = 0; i < this.orders.length; i++) {\n                        let itemStatusDelivered = {};\n                        for (let k = 0; k < this.orders[i].step.length; k++) {\n                            let startTemp = [];                        \n                            for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\n                                startTemp.push(this.orders[i].step[k].itemId[l].status);\n                            }\n                            itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\n                            if (startTemp.every(this.isEqualToOne)) {\n                                let temparray = this.orders[i].step[k].step.split(' ');\n                                let num = Number(temparray[1]);\n                                let stepTemp = temparray[0] + ' ' + ++num;\n                                let temp = {\n                                    tab: num,\n                                    step: stepTemp,\n                                }\n                                this.stepdata[this.orders[i]._id] = temp;\n                            } else {\n                                let tempp = {\n                                    tab: 0,\n                                    step: ''\n                                }\n                                if(this.orders[i].step.length>1){\n                                    tempp.tab = 1;\n                                    tempp.step = this.orders[i].step[1].step;\n                                }\n                                else{\n                                    tempp.tab = 0;\n                                    tempp.step = this.orders[i].step[0].step;\n                                }\n                                this.stepdata[this.orders[i]._id] = tempp;\n                            }\n                        }\n                        this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \n                    }\n                }\n            }\n        }\n       \n    }\n}\n\n\n// WEBPACK FOOTER //\n// /home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.component.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ListComponent } from './list.component';\nimport { ListRouting } from './list.routes'\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ListRouting\n  ],\n  declarations: [ListComponent]\n})\nexport class ListModule { }\n\n\n\n// WEBPACK FOOTER //\n// /home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.module.ts","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ListComponent } from './list.component';\n\nconst routes: Routes = [\n    { path: '', component: ListComponent }\n];\n\n\nexport const ListRouting: ModuleWithProviders = RouterModule.forChild(routes); \n\n\n\n// WEBPACK FOOTER //\n// /home/huulke/Documents/projects/hirundo/web-hirundo/src/app/hirundo/waiter/list/list.routes.ts"],"sourceRoot":"webpack:///"}