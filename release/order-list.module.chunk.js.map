{"version":3,"sources":["E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.html","E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.scss","E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.ts","E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.module.ts","E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.routes.ts","E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.service.ts","E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/orderby.ts"],"names":[],"mappings":"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","file":"order-list.module.chunk.js","sourcesContent":["module.exports = \"<div class=\\\"tabs-container\\\">\\r\\n    <ul>\\r\\n        <li [class.active]=\\\"activetab == 1\\\" (click)=\\\"changeTab(1)\\\">\\r\\n            All\\r\\n        </li>\\r\\n        <li [class.active]=\\\"activetab == 2\\\" (click)=\\\"changeTab(2)\\\">\\r\\n            To Call \\r\\n        </li>\\r\\n        <li [class.active]=\\\"activetab == 3\\\" (click)=\\\"changeTab(3)\\\">\\r\\n            Delivered\\r\\n        </li>\\r\\n      </ul>\\r\\n</div>\\r\\n<div class=\\\"text-center\\\" *ngIf=\\\"!(orders && orders.length)\\\">No Order Found.</div>\\r\\n<div *ngIf=\\\"orders && orders.length\\\" class=\\\"order-list-container container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-6 col-md-6 col-lg-3\\\" *ngFor=\\\"let order of orders\\\">\\r\\n            <div class=\\\"card order-list\\\">\\r\\n                <div class=\\\"card-body\\\" [class.opacity]=\\\"order.status == 3\\\">\\r\\n                    <h4 class=\\\"card-title\\\" *ngIf=\\\"stepdata[order._id]\\\">\\r\\n                        <div>\\r\\n                            <img src=\\\"assets/images/table.png\\\" alt=\\\"\\\">\\r\\n                            <span>{{order.tableName}}/\\r\\n                                <span class=\\\"order-number\\\">N.{{order.orderId}}</span>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                        <!-- <div class=\\\"status bg-red\\\" *ngIf=\\\"remainingTime[order._id] && stepdata[order._id] && remainingTime[order._id][stepdata[order._id].step] != '00:00' && step.preparationTime\\\">\\r\\n                            New Order X{{remainingTime[order._id][stepdata[order._id].step]}}\\r\\n                        </div> -->\\r\\n                        <div *ngFor=\\\"let step of order.step\\\">\\r\\n                            <div class=\\\"status bg-red\\\" *ngIf=\\\"remainingTime[order._id] && stepdata[order._id] && step.step == stepdata[order._id].step && remainingTime[order._id][stepdata[order._id].step] && remainingTime[order._id][stepdata[order._id].step] != '00:00'\\\">\\r\\n                                New Order\\r\\n                            </div>\\r\\n                            <!-- <span class=\\\"status bg-red\\\" *ngIf=\\\"stepdata[order._id] && step.step == stepdata[order._id].step\\\">New Order X{{step.preparationTime}}</span> -->\\r\\n                        </div>\\r\\n                    </h4>\\r\\n                    <div class=\\\"card-text\\\">\\r\\n                        <p>\\r\\n                            <i class=\\\"fas fa-cube\\\"></i> {{order.room.name}}</p>\\r\\n                        <p>\\r\\n                            <i class=\\\"far fa-clock\\\"></i> {{order.created_at | date:'hh:mm a'}}</p>\\r\\n                        <p>\\r\\n                            <i class=\\\"far fa-user\\\"></i> {{order.noOfPeople}}</p>\\r\\n                    </div>\\r\\n                    <div class=\\\"step-listing\\\">\\r\\n                        <ul *ngIf=\\\"stepdata[order._id]\\\">\\r\\n                            <li *ngFor=\\\"let step of order.step; let i = index;\\\" (click)=\\\"selectedTab(step.step,i,order._id)\\\" [class.active]=\\\"step.step == stepdata[order._id].step\\\"\\r\\n                                [class.completed]=\\\"itemStatusDelivered[order._id] && itemStatusDelivered[order._id][step.step]\\\">{{step.step}}</li>\\r\\n                        </ul>\\r\\n                    </div>\\r\\n                    <div class=\\\"order-items-container\\\">\\r\\n                        <div *ngFor=\\\"let step of order.step; let i= index\\\">\\r\\n                            <div *ngFor=\\\"let item of step.itemId\\\">\\r\\n                                <div class=\\\"order-item\\\" *ngIf=\\\"stepdata[order._id] && item.step == stepdata[order._id].step\\\" [class.text-line]=\\\"item.status == 1\\\">\\r\\n                                    <!-- <label class=\\\"label item-status\\\">{{getOrderStatus(item.status)}}</label> -->\\r\\n                                    <div class=\\\"order-item-img\\\">\\r\\n                                        {{item.quantity}} X\\r\\n                                    </div>\\r\\n                                    <div class=\\\"order-item-detail\\\">\\r\\n                                        {{item.id.name}}\\r\\n                                        <ul>\\r\\n                                            <li *ngFor=\\\"let varient of item.variant\\\">\\r\\n                                                <i *ngIf=\\\"varient.status == 1\\\">+</i>\\r\\n                                                <i *ngIf=\\\"varient.status == 0\\\">-</i> {{varient.name}}\\r\\n                                            </li>\\r\\n                                        </ul>\\r\\n                                        <ul>\\r\\n                                            <li>\\r\\n                                                {{item.notes}}\\r\\n                                            </li>\\r\\n                                        </ul>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"order-quantity d-flex w-105\\\">\\r\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-floting update-order-btn\\\" *ngIf=\\\"(step.step == 'Uscita 1')\\\" (click)=\\\"updateItem(item, order._id, 2)\\\">\\r\\n                                            <img src=\\\"assets/images/order-deliver.png\\\" alt=\\\"\\\" />\\r\\n                                        </button>\\r\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-floting update-order-btn\\\" *ngIf=\\\"(step.step != 'Uscita 1') && itemStatusDelivered[order._id] && !itemStatusDelivered[order._id][step.step] && stepdata[order._id] && (order.stepStatus == step.step)\\\" (click)=\\\"updateItem(item, order._id, 2)\\\">\\r\\n                                            <img src=\\\"assets/images/order-deliver.png\\\" alt=\\\"\\\" />\\r\\n                                        </button>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"order-call-btn\\\" *ngIf=\\\"order.step.length\\\">\\r\\n                    <div *ngFor=\\\"let step of order.step\\\">\\r\\n                        <div *ngIf=\\\"stepdata[order._id].step == step.step\\\">\\r\\n                            <div class=\\\"department-checkbtn-container\\\">\\r\\n                                <span *ngFor=\\\"let department of step.department\\\">\\r\\n                                    <span class=\\\"department-checkbtn\\\" *ngIf=\\\"(step.step == 'Uscita 1') && (authGuard.getCurrentUser()._id == department.id._id) && itemStatusDelivered[order._id] && !itemStatusDelivered[order._id][step.step]\\\"\\r\\n                                        [class.bg-grey]=\\\"department.status == 0\\\" [class.bg-green]=\\\"department.status == 1\\\" (click)=\\\"updateDepartmentStatus(department,order,step.step)\\\">\\r\\n                                        <i class=\\\"fas fa-check-circle\\\"></i>\\r\\n                                    </span>\\r\\n                                    <span class=\\\"department-checkbtn\\\" *ngIf=\\\"(step.step != 'Uscita 1') && stepdata[order._id] && (order.stepStatus == step.step) && (authGuard.getCurrentUserId() == department.id._id) && itemStatusDelivered[order._id] && !itemStatusDelivered[order._id][step.step]\\\"\\r\\n                                        [class.bg-grey]=\\\"department.status == 0\\\" [class.bg-green]=\\\"department.status == 1\\\" (click)=\\\"updateDepartmentStatus(department,order,step.step)\\\">\\r\\n                                        <i class=\\\"fas fa-check-circle\\\"></i>\\r\\n                                    </span>\\r\\n                                    <span class=\\\"department-name\\\"  [class.bg-grey]=\\\"department.status == 0\\\" [class.bg-green]=\\\"department.status == 1\\\" *ngIf=\\\"authGuard.getCurrentUser()._id != department.id._id\\\">{{getFirstChar(department.id.firstName)}}</span>\\r\\n                                </span>\\r\\n                            </div>\\r\\n                            <button type=\\\"submit\\\" *ngIf=\\\"stepdata[order._id] && (step.step == 'Uscita 1') && itemStatusDelivered[order._id] && !itemStatusDelivered[order._id][step.step]\\\"\\r\\n                            (click)=\\\"updateStepItem(step, order)\\\">Delivered</button>\\r\\n                            <button type=\\\"submit\\\" *ngIf=\\\"(step.step != 'Uscita 1') && stepdata[order._id] && (order.stepStatus == step.step) && itemStatusDelivered[order._id] && !itemStatusDelivered[order._id][step.step]\\\"\\r\\n                            (click)=\\\"updateStepItem(step, order)\\\">Delivered</button>\\r\\n                            <button class=\\\"bg-yellow\\\" *ngIf=\\\"(step.step != 'Uscita 1') && itemStatusDelivered[order._id] && !itemStatusDelivered[order._id][step.step] && stepdata[order._id] && (order.stepStatus != step.step)\\\"\\r\\n                                type=\\\"submit\\\" [disabled]=\\\"true\\\">To Call</button>\\r\\n                        </div>\\r\\n\\r\\n                        <!-- Modal -->\\r\\n\\r\\n                        <div class=\\\"modal fade modal-sm\\\" id=\\\"exampleModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\r\\n                            <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\r\\n                                <div class=\\\"modal-content\\\">\\r\\n                                    <div class=\\\"modal-header\\\">\\r\\n                                        <h4 class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\">Confirm Deliver</h4>\\r\\n                                        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\r\\n                                            <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n                                        </button>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"modal-body\\\">\\r\\n\\r\\n                                    </div>\\r\\n                                    <div class=\\\"modal-footer\\\">\\r\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Close</button>\\r\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"updateStepItem(step, order)\\\">Confirm</button>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.html\n// module id = ../../../../../src/app/hirundo/department/order-list/order-list.component.html\n// module chunks = order-list.module","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".tabs-container {\\n  position: fixed;\\n  top: 50px;\\n  width: 100%; }\\n\\n.order-list-container {\\n  margin-top: 50px; }\\n  .order-list-container .row {\\n    -ms-flex-wrap: nowrap !important;\\n        flex-wrap: nowrap !important; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.scss\n// module id = ../../../../../src/app/hirundo/department/order-list/order-list.component.scss\n// module chunks = order-list.module","// import { Component, OnInit, IterableDiffers, Input, DoCheck } from '@angular/core';\r\n// import { OrderByPipe } from '../../orderby';\r\n// import { OrderListService } from './order-list.service';\r\n// import { WebsocketService } from '../../../service/websocket.service';\r\n// import { AuthGuard } from '../../../shared/guard/auth.guard';\r\n// import *  as _ from 'lodash';\r\n// @Component({\r\n//     selector: 'app-order-list',\r\n//     templateUrl: './order-list.component.html',\r\n//     styleUrls: ['./order-list.component.scss']\r\n// })\r\n\r\n// export class OrderListComponent implements DoCheck {\r\n//     @Input() orders: Array<any> = [];\r\n//     differ: any;\r\n//     public clock: any;\r\n//     public tick: any;\r\n//     public loadingOrders: boolean = true;\r\n//     public steps: Array<any> = [];\r\n//     public activetab: boolean[] = [];\r\n//     public stepdata: Array<any> = [];\r\n//     public orderId: Array<any> = [];\r\n//     public times: Array<any> = [];\r\n//     public itemStatusStart: Array<any> = [];\r\n//     public itemStatusDelivered: Array<any> = [];\r\n//     public itemStatusRunning: Array<any> = [];   \r\n//     public itemStatusCompleted: Array<any> = [];   \r\n//     public completeButton = false;\r\n//     public remainingTime: Array<any> = [];\r\n//     public orderStepData: {};\r\n//     public barWidth: Array<any> = [];\r\n//     public id;\r\n//     public itemsArray = [];\r\n//     constructor(public websocketService: WebsocketService, public authGuard: AuthGuard, private differs: IterableDiffers) {\r\n//         this.differ = differs.find([]).create(null);\r\n//     }\r\n\r\n//     ngOnInit() {\r\n//         this.websocketService.getOrders().then(data => {\r\n//             this.orders = data;\r\n//             if (this.orders.length) {\r\n//                 this.itemStatusStart = [];\r\n//                 this.itemStatusDelivered = [];\r\n//                 this.itemStatusRunning = [];                \r\n//                 this.itemStatusCompleted = [];                \r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     let time = {};\r\n//                     let remtime = {};\r\n//                     let itemStatusStart = {};\r\n//                     let itemStatusDelivered = {};\r\n//                     let itemStatusRunning = {};\r\n//                     let itemStatusCompleted = {};\r\n//                     for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                         let temp = [];\r\n//                         let startTemp = [];                        \r\n//                         for (let l = 0; l < this.orders[i].step[k].item.length; l++) {\r\n//                             if (temp.indexOf(this.orders[i].step[k].item[l].id.preparationTime) < 0) {\r\n//                                 temp.push(this.orders[i].step[k].item[l].id.preparationTime);\r\n//                             }\r\n//                             startTemp.push(this.orders[i].step[k].item[l].status);\r\n//                         }\r\n//                         time[this.orders[i].step[k].step] = Math.max(...temp);\r\n//                         remtime[this.orders[i].step[k].step] = '0:00';\r\n//                         itemStatusStart[this.orders[i].step[k].step] = startTemp.every(this.isEqualToZero);\r\n//                         itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n//                         itemStatusRunning[this.orders[i].step[k].step] = startTemp.every(this.isEqualToFour);\r\n//                         itemStatusCompleted[this.orders[i].step[k].step] = startTemp.every(this.isEqualToFive);\r\n//                         if (startTemp.every(this.isEqualToOne)) {\r\n//                             let temparray = this.orders[i].step[k].step.split(' ');\r\n//                             let num = Number(temparray[1]);\r\n//                             let stepTemp = temparray[0] + ' ' + ++num;\r\n//                             let temp = {\r\n//                                 tab: num,\r\n//                                 step: stepTemp,\r\n//                             }\r\n//                             this.stepdata[this.orders[i]._id] = temp;\r\n//                             this.itemsArray[this.orders[i]._id] = this.orders[i].step[k].item;                            \r\n//                         } else {\r\n//                             let tempp = {\r\n//                                 tab: 0,\r\n//                                 step: ''\r\n//                             }\r\n//                             tempp.tab = 0;\r\n//                             tempp.step = this.orders[i].step[0].step;\r\n//                             this.stepdata[this.orders[i]._id] = tempp;\r\n//                             this.itemsArray[this.orders[i]._id] = this.orders[i].step[0].item;\r\n//                         }\r\n//                     }\r\n//                     this.times[this.orders[i]._id] = time;\r\n//                     this.remainingTime[this.orders[i]._id] = remtime; \r\n//                     this.itemStatusStart[this.orders[i]._id] = itemStatusStart;\r\n//                     this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \r\n//                     this.itemStatusRunning[this.orders[i]._id] = itemStatusRunning;                   \r\n//                     this.itemStatusCompleted[this.orders[i]._id] = itemStatusCompleted; \r\n//                 }\r\n//             }\r\n//             this.loadingOrders = false;\r\n//         })\r\n//             .catch(error => {\r\n//             });\r\n//         this.tick = setInterval(() => {\r\n//             this.clock = Date.now();\r\n//         }, 1000);\r\n//     }\r\n\r\n//     isEqualToZero(currentValue) {\r\n//         return currentValue == 0;\r\n//     };\r\n//     isEqualToOne(currentValue) {\r\n//         return currentValue == 1;\r\n//     };\r\n//     isEqualToFour(currentValue) {\r\n//         return currentValue == 4;\r\n//     }; \r\n//     isEqualToFive(currentValue) {\r\n//         return currentValue == 5;\r\n//     };\r\n    \r\n//     public getOrderStatus(status) {\r\n//         var str = 'In progress';\r\n//         switch (status) {\r\n//             case 0:\r\n//                 str = 'New order'; break;\r\n//             case 1:\r\n//                 str = 'Delivered'; break;\r\n//             case 2:\r\n//                 str = 'Prepared'; break;\r\n//             case 3:\r\n//                 str = 'Cancelled'; break;\r\n//             case 4:\r\n//                 str = 'In progress'; break;\r\n//             case 5:\r\n//                 str = 'Completed'; break;\r\n//             default:\r\n//                 break;\r\n//         }\r\n//         return str;\r\n//     };\r\n\r\n//     public updateOrder(order, time, status) {\r\n//         order.status = status;\r\n//         let items = [];\r\n//         let ids = [];\r\n//         for (let i = 0; i < order.item.length; i++) {\r\n//             for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n//                 if (order.item[i].category == this.authGuard.getCurrentUser().category[k]) {\r\n//                     items.push(order.item[i].id._id);\r\n//                     ids.push(order.item[i]._id);                    \r\n//                 }\r\n//             }\r\n//         }\r\n//         let opts = {\r\n//             status: status,\r\n//             itemId: items,\r\n//             id: ids\r\n//         };\r\n//         this.websocketService.updateOrder(order._id, opts).then(data => {\r\n//             if (this.orders.length) {\r\n//                 this.itemStatusStart = [];\r\n//                 this.itemStatusDelivered = [];\r\n//                 this.itemStatusRunning = [];\r\n//                 this.itemStatusCompleted = [];\r\n                \r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     let itemStatusStart = {};\r\n//                     let itemStatusDelivered = {};\r\n//                     let itemStatusRunning = {};\r\n//                     let itemStatusCompleted = {};\r\n                    \r\n//                     for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                         let startTemp = [];\r\n//                         for (let n = 0; n < this.orders[i].step[m].item.length; n++) {\r\n//                             startTemp.push(this.orders[i].step[m].item[n].status);\r\n//                         }\r\n//                         itemStatusStart[this.orders[i].step[m].step] = startTemp.every(this.isEqualToZero);      \r\n//                         itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne);                          \r\n//                         itemStatusRunning[this.orders[i].step[m].step] = startTemp.every(this.isEqualToFour);                          \r\n//                         itemStatusCompleted[this.orders[i].step[m].step] = startTemp.every(this.isEqualToFive);                          \r\n                   \r\n//                     }\r\n//                     this.itemStatusStart[this.orders[i]._id] = itemStatusStart;  \r\n//                     this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;   \r\n//                     this.itemStatusRunning[this.orders[i]._id] = itemStatusRunning;                    \r\n//                     this.itemStatusCompleted[this.orders[i]._id] = itemStatusCompleted;                    \r\n                                     \r\n//                 }\r\n//             }\r\n//         }).catch(error => {\r\n//         });\r\n//     };\r\n\r\n//     public updateItem(item, order, status) {\r\n//         item.status = status;\r\n//         let items = [];\r\n//         let ids = [];        \r\n//         items.push(item.id._id);\r\n//         ids.push(item._id);                            \r\n//         let opts = {\r\n//             status: status,\r\n//             itemId: items,\r\n//             step: this.stepdata[order._id].step,\r\n//             id: ids            \r\n//         };\r\n//         this.websocketService.updateOrder(order, opts).then(data => {\r\n//             if (this.orders.length) {\r\n//                 this.itemStatusStart = [];\r\n//                 this.itemStatusDelivered = [];\r\n//                 this.itemStatusRunning = [];\r\n//                 this.itemStatusCompleted = [];\r\n                \r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     let itemStatusStart = {};\r\n//                     let itemStatusDelivered = {};\r\n//                     let itemStatusRunning = {};\r\n//                     let itemStatusCompleted = {};\r\n                    \r\n//                     for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                         let startTemp = [];\r\n//                         for (let n = 0; n < this.orders[i].step[m].item.length; n++) {\r\n//                             startTemp.push(this.orders[i].step[m].item[n].status);\r\n//                         }\r\n//                         itemStatusStart[this.orders[i].step[m].step] = startTemp.every(this.isEqualToZero);      \r\n//                         itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne); \r\n//                         itemStatusRunning[this.orders[i].step[m].step] = startTemp.every(this.isEqualToFour);      \r\n//                         itemStatusCompleted[this.orders[i].step[m].step] = startTemp.every(this.isEqualToFive);      \r\n                             \r\n//                     }\r\n//                     this.itemStatusStart[this.orders[i]._id] = itemStatusStart;   \r\n//                     this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n//                     this.itemStatusRunning[this.orders[i]._id] = itemStatusRunning;                    \r\n//                     this.itemStatusCompleted[this.orders[i]._id] = itemStatusCompleted;                    \r\n                                        \r\n                                     \r\n//                 }\r\n//             }\r\n//         }).catch(error => {\r\n//         });\r\n//     };\r\n\r\n//     public updateStepItem(step, index, order, time, status) {\r\n//         if (localStorage.getItem('step') != null) {\r\n//             localStorage.removeItem('step');\r\n//         }\r\n//         localStorage.setItem('step', JSON.stringify(step));\r\n//         let seconds = time * 60;\r\n//         let timeInterval = 1000;\r\n//         let m = time - 1;\r\n//         let w = parseFloat((100 / seconds).toFixed(2));\r\n//         let t = 0;\r\n//         let s = 60;\r\n//         var width = 0;\r\n//         step = JSON.parse(localStorage.getItem('step'));  // Clones the object                \r\n//         this.id = setInterval(() => {\r\n//             step = JSON.parse(localStorage.getItem('step'));  // Clones the object        \r\n//             if (step.status != 1 && step.status != 5 && step.step == this.stepdata[order._id].step) {\r\n//                 t = t + 1;\r\n//                 seconds = seconds - 1;\r\n//                 s = s - 1;\r\n//                 if (seconds == 0 && step.status != 1 && step.step == this.stepdata[order._id].step) {\r\n//                     clearInterval(this.id);\r\n//                     this.remainingTime[order._id][step.step] = '0:00';\r\n//                     let items = [];\r\n//                     let ids = [];                    \r\n//                     this.completeButton = true;\r\n//                     for (let i = 0; i < order.item.length; i++) {\r\n//                         for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n//                             if (((order.item[i].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(order.item[i].category)) > -1)) {\r\n//                                 if (order.item[i].step == this.stepdata[order._id].step) {\r\n//                                     order.item[i].status = status;\r\n//                                     if (items.indexOf(order.item[i].id._id) < 0) {\r\n//                                         items.push(order.item[i].id._id);\r\n//                                         ids.push(order.item[i]._id);                                        \r\n//                                     }\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                     let temp = {\r\n//                         status: 5,\r\n//                         itemId: items,\r\n//                         step: this.stepdata[order._id].step,\r\n//                         id: ids\r\n//                     };\r\n//                     this.websocketService.updateOrder(order._id, temp).then(data => {\r\n//                         order.status = data.data.status;\r\n//                         for (let i = 0; i < this.orders.length; i++) {\r\n//                             if (this.orders[i]._id == data.data._id) {\r\n//                                 this.orders[i].step = data.data.step;\r\n//                             }\r\n//                         }\r\n//                         for (let i = 0; i < data.data.step.length; i++) {\r\n//                             if (data.data.step[i].step == step.step) {\r\n//                                 step.status = data.data.step[i].status;\r\n//                             }\r\n//                         }\r\n//                         if (this.orders.length) {\r\n//                             this.itemStatusStart = [];\r\n//                             this.itemStatusDelivered = [];\r\n//                             this.itemStatusRunning = [];\r\n//                             this.itemStatusCompleted = [];\r\n                            \r\n//                             for (let i = 0; i < this.orders.length; i++) {\r\n//                                 let itemStatusStart = {};\r\n//                                 let itemStatusDelivered = {};\r\n//                                 let itemStatusRunning = {};\r\n//                                 let itemStatusCompleted = {};\r\n                                \r\n//                                 for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                                     let startTemp = [];\r\n//                                     for (let n = 0; n < this.orders[i].step[m].item.length; n++) {\r\n//                                         startTemp.push(this.orders[i].step[m].item[n].status);\r\n//                                     }\r\n//                                     itemStatusStart[this.orders[i].step[m].step] = startTemp.every(this.isEqualToZero);      \r\n//                                     itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne);      \r\n//                                     itemStatusRunning[this.orders[i].step[m].step] = startTemp.every(this.isEqualToFour);      \r\n//                                     itemStatusCompleted[this.orders[i].step[m].step] = startTemp.every(this.isEqualToFive);      \r\n                                    \r\n//                                 }\r\n//                                 this.itemStatusStart[this.orders[i]._id] = itemStatusStart;    \r\n//                                 this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;                    \r\n//                                 this.itemStatusRunning[this.orders[i]._id] = itemStatusRunning;                    \r\n//                                 this.itemStatusCompleted[this.orders[i]._id] = itemStatusCompleted;                    \r\n                                                \r\n//                             }\r\n//                         }\r\n//                     }).catch(error => {\r\n//                     });\r\n//                 }\r\n//                 else {\r\n//                     width = width + w;\r\n//                     if (width < 100) {\r\n//                         this.barWidth[step.step.replace(' ', '') + order._id + index] = width + '%';\r\n//                     } else {\r\n//                         this.barWidth[step.step.replace(' ', '') + order._id + index] = '100%';\r\n//                     }\r\n//                 }\r\n//                 if (t == 60) {\r\n//                     t = 0;\r\n//                     if (m == 0) {\r\n//                         m = 0;\r\n//                         s = 0;\r\n//                     } else {\r\n//                         m = m - 1;\r\n//                         s = 60;\r\n//                     }\r\n//                 }\r\n//                 var minutes = m;\r\n//                 this.remainingTime[order._id][this.stepdata[order._id].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n//             }\r\n//         }, timeInterval);\r\n//         let items = [];\r\n//         let ids = [];                            \r\n//         for (let i = 0; i < order.item.length; i++) {\r\n//             for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n//                 if (((order.item[i].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(order.item[i].category)) > -1)) {\r\n//                     if (order.item[i].step == this.stepdata[order._id].step) {\r\n//                         order.item[i].status = status;\r\n//                         if (items.indexOf(order.item[i].id._id) < 0) {\r\n//                             items.push(order.item[i].id._id);\r\n//                             ids.push(order.item[i]._id);                            \r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n//         let opts = {\r\n//             status: status,\r\n//             itemId: items,\r\n//             step: this.stepdata[order._id].step,\r\n//             id: ids\r\n//         };\r\n//         this.websocketService.updateOrder(order._id, opts).then((data) => {\r\n//             order.status = data.data.status;\r\n//             order.step = data.data.step;\r\n//             if (this.orders.length) {\r\n//                 this.itemStatusStart = [];    \r\n//                 this.itemStatusDelivered = []; \r\n//                 this.itemStatusRunning = [];                                                                                                                 \r\n//                 this.itemStatusCompleted = [];                                                                                                                 \r\n                                                                                                                                \r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     let itemStatusStart = {};\r\n//                     let itemStatusDelivered = {};\r\n//                     let itemStatusRunning = {};\r\n//                     let itemStatusCompleted = {};\r\n                    \r\n//                     for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                         let startTemp = [];\r\n//                         for (let n = 0; n < this.orders[i].step[m].item.length; n++) {\r\n//                             startTemp.push(this.orders[i].step[m].item[n].status);\r\n//                         }\r\n//                         itemStatusStart[this.orders[i].step[m].step] = startTemp.every(this.isEqualToZero);   \r\n//                         itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne);      \r\n//                         itemStatusRunning[this.orders[i].step[m].step] = startTemp.every(this.isEqualToFour);      \r\n//                         itemStatusCompleted[this.orders[i].step[m].step] = startTemp.every(this.isEqualToFive);      \r\n                   \r\n//                     }\r\n//                     this.itemStatusStart[this.orders[i]._id] = itemStatusStart;  \r\n//                     this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \r\n//                     this.itemStatusRunning[this.orders[i]._id] = itemStatusRunning;                    \r\n//                     this.itemStatusCompleted[this.orders[i]._id] = itemStatusCompleted;                    \r\n                                       \r\n//                 }\r\n//             }\r\n//             for (let i = 0; i < data.data.step.length; i++) {\r\n//                 if (data.data.step[i].step == step.step) {\r\n//                     step.status = data.data.step[i].status;\r\n//                     if (step.status == 5) {\r\n//                         seconds = 0;\r\n//                         timeInterval = 0;\r\n//                         clearInterval(this.id);\r\n//                         setTimeout(this.id.data.handleId);\r\n//                         this.remainingTime[order._id][step.step] = '0:00';\r\n//                     }\r\n//                     localStorage.setItem('step',JSON.stringify(data.data.step[i]));\r\n//                 }\r\n//             }\r\n//             if (order.step) {\r\n//                 for (let j = 0; j < order.step.length - 1; j++) {\r\n//                     if (order.step[j].status == 1) {\r\n//                         let temparray = order.step[j].step.split(' ');\r\n//                         let num = Number(temparray[1]);\r\n//                         let stepTemp = temparray[0] + ' ' + ++num;\r\n//                         let temp = {\r\n//                             tab: num,\r\n//                             step: stepTemp,\r\n//                         }\r\n//                         this.stepdata[order._id] = temp;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             if (data.data.status == 1) {\r\n//                 for (var i = 0; i < this.orders.length; i++) {\r\n//                     if (data.data._id === this.orders[i]._id) {\r\n//                         this.orders.splice(i, 1);\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }).catch(error => {\r\n//         });\r\n//     };\r\n\r\n//     showCompleteBtn(step, index, order, time) {\r\n//         this.completeButton = true;\r\n//     }\r\n\r\n//     selectedTab(step, tab, orderId) {\r\n//         let temp = {\r\n//             tab: tab,\r\n//             step: step.step\r\n//         }\r\n//         this.stepdata[orderId] = temp;\r\n//         this.itemsArray[orderId] = step.item;                                    \r\n//     }\r\n\r\n//     ngDoCheck() {\r\n//         if(this.orders && this.orders.length){\r\n//             const change = this.differ.diff(this.orders);\r\n//             if (change != null) {\r\n//                 if (this.orders.length) {\r\n//                     this.itemStatusStart = [];\r\n//                     this.itemStatusDelivered = [];\r\n//                     this.itemStatusRunning = [];                \r\n//                     this.itemStatusCompleted = [];                \r\n//                     for (let i = 0; i < this.orders.length; i++) {\r\n//                         let time = {};\r\n//                         let remtime = {};\r\n//                         let itemStatusStart = {};\r\n//                         let itemStatusDelivered = {};\r\n//                         let itemStatusRunning = {};\r\n//                         let itemStatusCompleted = {};\r\n//                         for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                             let temp = [];\r\n//                             let startTemp = [];                        \r\n//                             for (let l = 0; l < this.orders[i].step[k].item.length; l++) {\r\n//                                 if (temp.indexOf(this.orders[i].step[k].item[l].id.preparationTime) < 0) {\r\n//                                     temp.push(this.orders[i].step[k].item[l].id.preparationTime);\r\n//                                 }\r\n//                                 startTemp.push(this.orders[i].step[k].item[l].status);\r\n//                             }\r\n//                             time[this.orders[i].step[k].step] = Math.max(...temp);\r\n//                             remtime[this.orders[i].step[k].step] = '0:00';\r\n//                             itemStatusStart[this.orders[i].step[k].step] = startTemp.every(this.isEqualToZero);\r\n//                             itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n//                             itemStatusRunning[this.orders[i].step[k].step] = startTemp.every(this.isEqualToFour);\r\n//                             itemStatusCompleted[this.orders[i].step[k].step] = startTemp.every(this.isEqualToFive);\r\n//                             if (startTemp.every(this.isEqualToOne)) {\r\n//                                 let temparray = this.orders[i].step[k].step.split(' ');\r\n//                                 let num = Number(temparray[1]);\r\n//                                 let stepTemp = temparray[0] + ' ' + ++num;\r\n//                                 let temp = {\r\n//                                     tab: num,\r\n//                                     step: stepTemp,\r\n//                                 }\r\n//                                 this.stepdata[this.orders[i]._id] = temp;\r\n//                                 this.itemsArray[this.orders[i]._id] = this.orders[i].step[k].item;                                    \r\n//                             } else {\r\n//                                 let tempp = {\r\n//                                     tab: 0,\r\n//                                     step: ''\r\n//                                 }\r\n//                                 tempp.tab = 0;\r\n//                                 tempp.step = this.orders[i].step[0].step;\r\n//                                 this.stepdata[this.orders[i]._id] = tempp;\r\n//                                 this.itemsArray[this.orders[i]._id] = this.orders[i].step[0].item;                                                                    \r\n//                             }\r\n//                         }\r\n//                         this.times[this.orders[i]._id] = time;\r\n//                         this.remainingTime[this.orders[i]._id] = remtime; \r\n//                         this.itemStatusStart[this.orders[i]._id] = itemStatusStart;\r\n//                         this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \r\n//                         this.itemStatusRunning[this.orders[i]._id] = itemStatusRunning;                   \r\n//                         this.itemStatusCompleted[this.orders[i]._id] = itemStatusCompleted; \r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n        \r\n//     }\r\n// }\r\n\r\n// import { Component, OnInit, IterableDiffers, Input, DoCheck } from '@angular/core';\r\n// import { OrderByPipe } from '../../orderby';\r\n// import { OrderListService } from './order-list.service';\r\n// import { WebsocketService } from '../../../service/websocket.service';\r\n// import { AuthGuard } from '../../../shared/guard/auth.guard';\r\n// import *  as _ from 'lodash';\r\n// @Component({\r\n//     selector: 'app-order-list',\r\n//     templateUrl: './order-list.component.html',\r\n//     styleUrls: ['./order-list.component.scss']\r\n// })\r\n\r\n// export class OrderListComponent implements DoCheck {\r\n//     @Input() orders: Array<any> = [];\r\n//     differ: any;\r\n//     public clock: any;\r\n//     public tick: any;\r\n//     public loadingOrders: boolean = true;\r\n//     public stepdata: Array<any> = [];\r\n//     public itemStatusDelivered: Array<any> = [];\r\n//     public activetab = 1;\r\n//     constructor(public websocketService: WebsocketService, public authGuard: AuthGuard, private differs: IterableDiffers) {\r\n//         this.differ = differs.find([]).create(null);\r\n//     }\r\n\r\n//     ngOnInit() {\r\n//         this.activetab = 1;\r\n//         this.websocketService.getOrders(this.activetab).then(data => {\r\n//             this.orders = data;\r\n//             if (this.orders.length) {\r\n//                 this.itemStatusDelivered = [];\r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     let itemStatusDelivered = {};\r\n//                     for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                         let startTemp = [];                        \r\n//                         for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\r\n//                             startTemp.push(this.orders[i].step[k].itemId[l].status);\r\n//                         }\r\n//                         itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n//                     }\r\n//                     this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \r\n//                     console.log('this.itemStatusDelivered',this.itemStatusDelivered);\r\n//                     for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                         if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n//                             let temparray = this.orders[i].step[m].step.split(' ');\r\n//                             let num = Number(temparray[1]);\r\n//                             let temp = {\r\n//                                 tab: num - 1,\r\n//                                 step: this.orders[i].step[m].step,\r\n//                             }\r\n//                             this.stepdata[this.orders[i]._id] = temp;\r\n//                             break;\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             this.loadingOrders = false;\r\n//         })\r\n//             .catch(error => {\r\n//             });\r\n//         this.tick = setInterval(() => {\r\n//             this.clock = Date.now();\r\n//         }, 1000);\r\n//     }\r\n\r\n//     isEqualToOne(currentValue) {\r\n//         return currentValue == 1;\r\n//     };\r\n    \r\n//     public getOrderStatus(status) {\r\n//         var str = 'In progress';\r\n//         switch (status) {\r\n//             case 0:\r\n//                 str = 'New order'; break;\r\n//             case 1:\r\n//                 str = 'Delivered'; break;\r\n//             case 2:\r\n//                 str = 'Prepared'; break;\r\n//             case 3:\r\n//                 str = 'Cancelled'; break;\r\n//             case 4:\r\n//                 str = 'In progress'; break;\r\n//             case 5:\r\n//                 str = 'Completed'; break;\r\n//             default:\r\n//                 break;\r\n//         }\r\n//         return str;\r\n//     };\r\n\r\n//     public updateItem(item, order) {\r\n//         item.status = 1;\r\n//         let ids = [];        \r\n//         ids.push(item._id);                            \r\n//         let opts = {\r\n//             id: ids            \r\n//         };\r\n//         this.websocketService.updateOrder(order, opts).then(data => {\r\n//             order = data.data;\r\n//             if (this.orders.length) {\r\n//                 this.itemStatusDelivered = [];\r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     let itemStatusDelivered = {};\r\n//                     for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                         let startTemp = [];\r\n//                         for (let n = 0; n < this.orders[i].step[m].itemId.length; n++) {\r\n//                             startTemp.push(this.orders[i].step[m].itemId[n].status);\r\n//                         }\r\n//                         itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne); \r\n//                     }\r\n//                     this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n//                     console.log('this.itemStatusDelivered',this.itemStatusDelivered);\r\n//                     for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                         if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n//                             let temparray = this.orders[i].step[m].step.split(' ');\r\n//                             let num = Number(temparray[1]);\r\n//                             let temp = {\r\n//                                 tab: num - 1,\r\n//                                 step: this.orders[i].step[m].step,\r\n//                             }\r\n//                             this.stepdata[this.orders[i]._id] = temp;\r\n//                             break;\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }).catch(error => {\r\n//         });\r\n//     };\r\n\r\n//     public updateStepItem(step, order) {\r\n//         var result = confirm(\"Do you want to deliver?\");\r\n//         if (result) {\r\n//             console.log(step, 'step udpate');\r\n//             console.log(order, 'step udpate');\r\n//             let ids = [];\r\n//             for (let i = 0; i < step.itemId.length; i++) {\r\n//                 step.itemId[i].status = 1;\r\n//                 if (ids.indexOf(step.itemId[i]._id) < 0) {\r\n//                     ids.push(step.itemId[i]._id);\r\n//                 }\r\n//             }\r\n//             let opts = {\r\n//                 id: ids\r\n//             };\r\n//             this.websocketService.updateOrder(order._id, opts).then((data) => {\r\n//                 order = data.data;\r\n//                 this.websocketService.getOrders(this.activetab).then(data => {\r\n//                     this.orders = data;\r\n//                     if (this.orders.length) {\r\n//                         this.itemStatusDelivered = [];\r\n//                         for (let i = 0; i < this.orders.length; i++) {\r\n//                             let itemStatusDelivered = {};\r\n//                             for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                                 let startTemp = [];                        \r\n//                                 for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\r\n//                                     startTemp.push(this.orders[i].step[k].itemId[l].status);\r\n//                                 }\r\n//                                 itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n//                             }\r\n//                             this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \r\n//                             console.log('this.itemStatusDelivered',this.itemStatusDelivered);\r\n//                             for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                                 if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n//                                     let temparray = this.orders[i].step[m].step.split(' ');\r\n//                                     let num = Number(temparray[1]);\r\n//                                     let temp = {\r\n//                                         tab: num - 1,\r\n//                                         step: this.orders[i].step[m].step,\r\n//                                     }\r\n//                                     this.stepdata[this.orders[i]._id] = temp;\r\n//                                     break;\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                     this.loadingOrders = false;\r\n//                 })\r\n//                 .catch(error => {\r\n//                 });\r\n//             }).catch(error => {\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     selectedTab(step, tab, orderId) {\r\n//         let temp = {\r\n//             tab: tab,\r\n//             step: step\r\n//         }\r\n//         this.stepdata[orderId] = temp;\r\n//     }\r\n\r\n//     getFirstChar(text){\r\n//         return text.charAt();\r\n//     }\r\n\r\n//     updateDepartmentStatus(department, order, step){\r\n//         let opts = {\r\n//             step: step\r\n//         };\r\n//         this.websocketService.updateDepartmentStatus(order._id, opts).then((data) => {\r\n//             department.status = 1;\r\n//             order = data.data;\r\n//             if (this.orders.length) {\r\n//                 this.itemStatusDelivered = [];\r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     let itemStatusDelivered = {};\r\n//                     for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                         let startTemp = [];\r\n//                         for (let n = 0; n < this.orders[i].step[m].itemId.length; n++) {\r\n//                             startTemp.push(this.orders[i].step[m].itemId[n].status);\r\n//                         }\r\n//                         itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne);\r\n//                     }\r\n//                     this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n//                     console.log('this.itemStatusDelivered',this.itemStatusDelivered);\r\n//                     for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                         if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n//                             let temparray = this.orders[i].step[m].step.split(' ');\r\n//                             let num = Number(temparray[1]);\r\n//                             let temp = {\r\n//                                 tab: num - 1,\r\n//                                 step: this.orders[i].step[m].step,\r\n//                             }\r\n//                             this.stepdata[this.orders[i]._id] = temp;\r\n//                             break;\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }).catch(error => {\r\n//         });\r\n//     }\r\n\r\n//     // getFirstChar(text){\r\n//     //     return text.charAt();\r\n//     // }\r\n\r\n//     ngDoCheck() {\r\n//         if (this.orders && this.orders.length) {\r\n//             const change = this.differ.diff(this.orders);\r\n//             if (change != null) {\r\n//                 if (this.orders.length) {\r\n//                     this.itemStatusDelivered = [];\r\n//                     for (let i = 0; i < this.orders.length; i++) {\r\n//                         let itemStatusDelivered = {};\r\n//                         for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                             let startTemp = [];\r\n//                             for (let n = 0; n < this.orders[i].step[m].itemId.length; n++) {\r\n//                                 startTemp.push(this.orders[i].step[m].itemId[n].status);\r\n//                             }\r\n//                             itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne); \r\n//                         }\r\n//                         this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n//                         console.log('this.itemStatusDelivered',this.itemStatusDelivered);\r\n//                         for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                             if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n//                                 let temparray = this.orders[i].step[m].step.split(' ');\r\n//                                 let num = Number(temparray[1]);\r\n//                                 let temp = {\r\n//                                     tab: num - 1,\r\n//                                     step: this.orders[i].step[m].step,\r\n//                                 }\r\n//                                 this.stepdata[this.orders[i]._id] = temp;\r\n//                                 break;\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     public changeTab(tab){\r\n//         this.activetab = tab;\r\n//         this.websocketService.getOrders(this.activetab).then(data => {\r\n//             this.orders = data;\r\n//             if (this.orders.length) {\r\n//                 this.itemStatusDelivered = [];\r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     let itemStatusDelivered = {};\r\n//                     for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                         let startTemp = [];                        \r\n//                         for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\r\n//                             startTemp.push(this.orders[i].step[k].itemId[l].status);\r\n//                         }\r\n//                         itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n//                     }\r\n//                     this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered; \r\n//                     console.log('this.itemStatusDelivered',this.itemStatusDelivered);\r\n//                     for (let m = 0; m < this.orders[i].step.length; m++) {\r\n//                         if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n//                             let temparray = this.orders[i].step[m].step.split(' ');\r\n//                             let num = Number(temparray[1]);\r\n//                             let temp = {\r\n//                                 tab: num - 1,\r\n//                                 step: this.orders[i].step[m].step,\r\n//                             }\r\n//                             this.stepdata[this.orders[i]._id] = temp;\r\n//                             break;\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             this.loadingOrders = false;\r\n//         })\r\n//         .catch(error => {\r\n//         });\r\n//     }\r\n//     removeText(orderid,step){\r\n//         for (let i = 0; i < this.orders.length; i++) {\r\n//             for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                 }\r\n         \r\n//         }\r\n//         let timePeriodInMs = step.preparationTime*60*1000;\r\n//         console.log('timePeriodInMs',timePeriodInMs);        \r\n//         setTimeout(function() \r\n//         { \r\n//             document.getElementById(orderid+'_'+step.step.replace(' ','')).style.display = \"none\"; \r\n//         }, \r\n//         timePeriodInMs);\r\n//     }\r\n// }\r\n\r\n// new code*************************************************************************\r\nimport { Component, OnInit, IterableDiffers, Input, DoCheck } from '@angular/core';\r\nimport { OrderByPipe } from '../../orderby';\r\nimport { OrderListService } from './order-list.service';\r\nimport { WebsocketService } from '../../../service/websocket.service';\r\nimport { AuthGuard } from '../../../shared/guard/auth.guard';\r\nimport *  as _ from 'lodash';\r\n@Component({\r\n    selector: 'app-order-list',\r\n    templateUrl: './order-list.component.html',\r\n    styleUrls: ['./order-list.component.scss']\r\n})\r\n\r\nexport class OrderListComponent implements DoCheck {\r\n    @Input() orders: Array<any> = [];\r\n    differ: any;\r\n    public clock: any;\r\n    public tick: any;\r\n    public loadingOrders: boolean = true;\r\n    public stepdata: Array<any> = [];\r\n    public itemStatusDelivered: Array<any> = [];\r\n    public remainingTime: Array<any> = [];\r\n    public activetab = 1;\r\n    public changedTab: boolean = false;    \r\n    constructor(public websocketService: WebsocketService, public authGuard: AuthGuard, private differs: IterableDiffers) {\r\n        this.differ = differs.find([]).create(null);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.activetab = 1;\r\n        this.websocketService.getOrders(this.activetab).then(data => {\r\n            this.orders = data;\r\n            if (this.orders.length) {\r\n                this.itemStatusDelivered = [];\r\n                this.remainingTime = [];\r\n                for (let i = 0; i < this.orders.length; i++) {\r\n                    if (this.orders[i]) {\r\n                        let itemStatusDelivered = {};\r\n                        let remTime = {};\r\n                        for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                            let startTemp = [];\r\n                            for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\r\n                                startTemp.push(this.orders[i].step[k].itemId[l].status);\r\n                            }\r\n                            itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n                        }\r\n                        this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n                        console.log('ngOnInit this.itemStatusDelivered', this.itemStatusDelivered);\r\n                        for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                            if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n                                let temparray = this.orders[i].step[m].step.split(' ');\r\n                                let num = Number(temparray[1]);\r\n                                let temp = {\r\n                                    tab: num - 1,\r\n                                    step: this.orders[i].step[m].step,\r\n                                }\r\n                                this.stepdata[this.orders[i]._id] = temp;\r\n                                break;\r\n                            }\r\n                        }\r\n                        for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                            if (this.orders[i].step[k].preparationTime) {\r\n                                if ((this.orders[i].step[k].step == 'Uscita 1') && !this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[k].step]) {\r\n                                    let seconds = this.orders[i].step[k].preparationTime * 60;\r\n                                    let timeInterval = 1000;\r\n                                    let m = this.orders[i].step[k].preparationTime - 1;\r\n                                    let t = 0;\r\n                                    let s = 60;\r\n                                    var id = setInterval(() => {\r\n                                        t = t + 1;\r\n                                        seconds = seconds > 0 ? seconds - 1 : 0;\r\n                                        s = s > 0 ? s - 1 : 0;\r\n                                        if (seconds == 0) {\r\n                                            clearInterval(id);\r\n                                        }\r\n                                        if (t == 60) {\r\n                                            t = 0;\r\n                                            if (m == 0) {\r\n                                                m = 0;\r\n                                                s = 0;\r\n                                            } else {\r\n                                                m = m - 1;\r\n                                                s = 60;\r\n                                            }\r\n                                        }\r\n                                        var minutes = m;\r\n                                        if(this.orders[i] && this.orders[i].step[k]){\r\n                                            remTime[this.orders[i].step[k].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n                                        }\r\n                                    }, timeInterval);\r\n                                }\r\n                                else if ((this.orders[i].step[k].step != 'Uscita 1') && (this.orders[i].stepStatus == this.orders[i].step[k].step) && !this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[k].step]) {\r\n                                    let seconds = this.orders[i].step[k].preparationTime * 60;\r\n                                    let timeInterval = 1000;\r\n                                    let m = this.orders[i].step[k].preparationTime - 1;\r\n                                    let t = 0;\r\n                                    let s = 60;\r\n                                    var id = setInterval(() => {\r\n                                        t = t + 1;\r\n                                        seconds = seconds > 0 ? seconds - 1 : 0;\r\n                                        s = s > 0 ? s - 1 : 0;\r\n                                        if (seconds == 0) {\r\n                                            clearInterval(id);\r\n                                        }\r\n                                        if (t == 60) {\r\n                                            t = 0;\r\n                                            if (m == 0) {\r\n                                                m = 0;\r\n                                                s = 0;\r\n                                            } else {\r\n                                                m = m - 1;\r\n                                                s = 60;\r\n                                            }\r\n                                        }\r\n                                        var minutes = m;\r\n                                        if(this.orders[i] && this.orders[i].step[k]){                                        \r\n                                        remTime[this.orders[i].step[k].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n                                        }\r\n                                    }, timeInterval);\r\n                                }\r\n                            }\r\n                        }\r\n                        this.remainingTime[this.orders[i]._id] = remTime;\r\n                    }\r\n                }\r\n            }\r\n            this.loadingOrders = false;\r\n        })\r\n            .catch(error => {\r\n            });\r\n        this.tick = setInterval(() => {\r\n            this.clock = Date.now();\r\n        }, 1000);\r\n    }\r\n\r\n    isEqualToOne(currentValue) {\r\n        return currentValue == 1;\r\n    };\r\n\r\n    public getOrderStatus(status) {\r\n        var str = 'In progress';\r\n        switch (status) {\r\n            case 0:\r\n                str = 'New order'; break;\r\n            case 1:\r\n                str = 'Delivered'; break;\r\n            case 2:\r\n                str = 'Prepared'; break;\r\n            case 3:\r\n                str = 'Cancelled'; break;\r\n            case 4:\r\n                str = 'In progress'; break;\r\n            case 5:\r\n                str = 'Completed'; break;\r\n            default:\r\n                break;\r\n        }\r\n        return str;\r\n    };\r\n\r\n    public updateItem(item, order) {\r\n        item.status = 1;\r\n        let ids = [];\r\n        ids.push(item._id);\r\n        let opts = {\r\n            id: ids\r\n        };\r\n        this.websocketService.updateOrder(order, opts).then(data => {\r\n            order = data.data;\r\n            if (this.orders.length) {\r\n                for (let i = 0; i < this.orders.length; i++) {\r\n                    if (this.orders[i].id == order) {\r\n                        let itemStatusDelivered = {};\r\n                        let remTime = {};\r\n                        for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                            let startTemp = [];\r\n                            for (let n = 0; n < this.orders[i].step[m].itemId.length; n++) {\r\n                                startTemp.push(this.orders[i].step[m].itemId[n].status);\r\n                            }\r\n                            itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne);\r\n                        }\r\n                        this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n                        console.log('updateItem this.itemStatusDelivered', this.itemStatusDelivered);\r\n                        for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                            if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n                                let temparray = this.orders[i].step[m].step.split(' ');\r\n                                let num = Number(temparray[1]);\r\n                                let temp = {\r\n                                    tab: num - 1,\r\n                                    step: this.orders[i].step[m].step,\r\n                                }\r\n                                this.stepdata[this.orders[i]._id] = temp;\r\n                                break;\r\n                            }\r\n                        }\r\n                        for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                            if (this.orders[i].step[k].preparationTime) {\r\n                                if ((this.orders[i].step[k].step == 'Uscita 1') && !this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[k].step]) {\r\n                                    let seconds = this.orders[i].step[k].preparationTime * 60;\r\n                                    let timeInterval = 1000;\r\n                                    let m = this.orders[i].step[k].preparationTime - 1;\r\n                                    let t = 0;\r\n                                    let s = 60;\r\n                                    var id = setInterval(() => {\r\n                                        t = t + 1;\r\n                                        seconds = seconds > 0 ? seconds - 1 : 0;\r\n                                        s = s > 0 ? s - 1 : 0;\r\n                                        if (seconds == 0) {\r\n                                            clearInterval(id);\r\n                                        }\r\n                                        if (t == 60) {\r\n                                            t = 0;\r\n                                            if (m == 0) {\r\n                                                m = 0;\r\n                                                s = 0;\r\n                                            } else {\r\n                                                m = m - 1;\r\n                                                s = 60;\r\n                                            }\r\n                                        }\r\n                                        var minutes = m;\r\n                                        if(this.orders[i] && this.orders[i].step[k]){                                                                                \r\n                                        remTime[this.orders[i].step[k].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n                                        }\r\n                                    }, timeInterval);\r\n                                }\r\n                                else if ((this.orders[i].step[k].step != 'Uscita 1') && (this.orders[i].stepStatus == this.orders[i].step[k].step) && !this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[k].step]) {\r\n                                    let seconds = this.orders[i].step[k].preparationTime * 60;\r\n                                    let timeInterval = 1000;\r\n                                    let m = this.orders[i].step[k].preparationTime - 1;\r\n                                    let t = 0;\r\n                                    let s = 60;\r\n                                    var id = setInterval(() => {\r\n                                        t = t + 1;\r\n                                        seconds = seconds > 0 ? seconds - 1 : 0;\r\n                                        s = s > 0 ? s - 1 : 0;\r\n                                        if (seconds == 0) {\r\n                                            clearInterval(id);\r\n                                        }\r\n                                        if (t == 60) {\r\n                                            t = 0;\r\n                                            if (m == 0) {\r\n                                                m = 0;\r\n                                                s = 0;\r\n                                            } else {\r\n                                                m = m - 1;\r\n                                                s = 60;\r\n                                            }\r\n                                        }\r\n                                        var minutes = m;\r\n                                        if(this.orders[i] && this.orders[i].step[k]){                                        \r\n                                        \r\n                                        remTime[this.orders[i].step[k].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n                                    }}, timeInterval);\r\n                                }\r\n                            }\r\n                        }\r\n                        this.remainingTime[this.orders[i]._id] = remTime;\r\n                    }\r\n                }\r\n            }\r\n        }).catch(error => {\r\n        });\r\n    };\r\n\r\n    public updateStepItem(step, order) {\r\n        var result = confirm(\"Do you want to deliver?\");\r\n        if (result) {\r\n            let ids = [];\r\n            for (let i = 0; i < step.itemId.length; i++) {\r\n                step.itemId[i].status = 1;\r\n                if (ids.indexOf(step.itemId[i]._id) < 0) {\r\n                    ids.push(step.itemId[i]._id);\r\n                }\r\n            }\r\n            let opts = {\r\n                id: ids,\r\n                key: 'delivered'\r\n            };\r\n            this.websocketService.updateOrder(order._id, opts).then((data) => {\r\n                order =  _.cloneDeep(data.data);\r\n                this.websocketService.getOrders(this.activetab).then(data => {\r\n                    this.orders = data;\r\n                    if (this.orders.length) {\r\n                        for (let i = 0; i < this.orders.length; i++) {\r\n                            if (this.orders[i]._id == order._id) {\r\n                                let itemStatusDelivered = {};\r\n                                let remTime = {};\r\n                                for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                                    let startTemp = [];\r\n                                    for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\r\n                                        startTemp.push(this.orders[i].step[k].itemId[l].status);\r\n                                    }\r\n                                    itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n                                }\r\n                                this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n                                console.log('updateStepItem this.itemStatusDelivered', this.itemStatusDelivered);\r\n                                for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                                    if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n                                        let temparray = this.orders[i].step[m].step.split(' ');\r\n                                        let num = Number(temparray[1]);\r\n                                        let temp = {\r\n                                            tab: num - 1,\r\n                                            step: this.orders[i].step[m].step,\r\n                                        }\r\n                                        this.stepdata[this.orders[i]._id] = temp;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                let stepIds = [];\r\n                                for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                                stepIds.push(this.orders[i].step[k]._id);\r\n                                    if (this.orders[i].step[k].preparationTime) {\r\n                                        if ((this.orders[i].step[k].step == 'Uscita 1') && !this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[k].step]) {\r\n                                            let seconds = this.orders[i].step[k].preparationTime * 60;\r\n                                            let timeInterval = 1000;\r\n                                            let m = this.orders[i].step[k].preparationTime - 1;\r\n                                            let t = 0;\r\n                                            let s = 60;\r\n                                            var id = setInterval(() => {\r\n                                                t = t + 1;\r\n                                                seconds = seconds > 0 ? seconds - 1 : 0;\r\n                                                s = s > 0 ? s - 1 : 0;\r\n                                                if (seconds == 0) {\r\n                                                    clearInterval(id);\r\n                                                }\r\n                                                if (t == 60) {\r\n                                                    t = 0;\r\n                                                    if (m == 0) {\r\n                                                        m = 0;\r\n                                                        s = 0;\r\n                                                    } else {\r\n                                                        m = m - 1;\r\n                                                        s = 60;\r\n                                                    }\r\n                                                }\r\n                                                var minutes = m;\r\n                                        if(this.orders[i] && this.orders[i].step[k]){                                        \r\n                                                \r\n                                                remTime[this.orders[i].step[k].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n                                        }\r\n                                            }, timeInterval);\r\n                                        }\r\n                                        else if ((this.orders[i].step[k].step != 'Uscita 1') && (this.orders[i].stepStatus == this.orders[i].step[k].step) && !this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[k].step]) {\r\n                                            let seconds = this.orders[i].step[k].preparationTime * 60;\r\n                                            let timeInterval = 1000;\r\n                                            let m = this.orders[i].step[k].preparationTime - 1;\r\n                                            let t = 0;\r\n                                            let s = 60;\r\n                                            var id = setInterval(() => {\r\n                                                t = t + 1;\r\n                                                seconds = seconds > 0 ? seconds - 1 : 0;\r\n                                                s = s > 0 ? s - 1 : 0;\r\n                                                if (seconds == 0) {\r\n                                                    clearInterval(id);\r\n                                                }\r\n                                                if (t == 60) {\r\n                                                    t = 0;\r\n                                                    if (m == 0) {\r\n                                                        m = 0;\r\n                                                        s = 0;\r\n                                                    } else {\r\n                                                        m = m - 1;\r\n                                                        s = 60;\r\n                                                    }\r\n                                                }\r\n                                                var minutes = m;\r\n                                        if(this.orders[i] && this.orders[i].step[k]){                                        \r\n                                             \r\n                                                remTime[this.orders[i].step[k].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n                                        }\r\n                                            }, timeInterval);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                    this.remainingTime[this.orders[i]._id] = _.cloneDeep(remTime);\r\n                            break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.loadingOrders = false;\r\n                })\r\n                    .catch(error => {\r\n                    });\r\n            }).catch(error => {\r\n            });\r\n        }\r\n    };\r\n    isBelowThreshold(currentValue) {\r\n        return currentValue == 1;\r\n    };\r\n    selectedTab(step, tab, orderId) {\r\n        let temp = {\r\n            tab: tab,\r\n            step: step\r\n        }\r\n        this.stepdata[orderId] = temp;\r\n    }\r\n\r\n    getFirstChar(text) {\r\n        return text.charAt();\r\n    }\r\n\r\n    updateDepartmentStatus(department, order, step) {\r\n        if(department.status == 0){\r\n            department.status = 1;\r\n            var opts = {\r\n                step: step,\r\n                status : 1\r\n            };\r\n        }\r\n        else {\r\n            department.status = 0;\r\n            var opts = {\r\n                step: step,\r\n                status : 0\r\n            };\r\n        }\r\n        // let opts = {\r\n        //     step: step\r\n        // };\r\n        this.websocketService.updateDepartmentStatus(order._id, opts).then((data) => {\r\n            // department.status = 1;\r\n            order = data.data;\r\n            if (this.orders.length) {\r\n                this.itemStatusDelivered = [];\r\n                for (let i = 0; i < this.orders.length; i++) {\r\n                    if (this.orders[i]) {\r\n                        let itemStatusDelivered = {};\r\n                        for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                            let startTemp = [];\r\n                            for (let n = 0; n < this.orders[i].step[m].itemId.length; n++) {\r\n                                startTemp.push(this.orders[i].step[m].itemId[n].status);\r\n                            }\r\n                            itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne);\r\n                        }\r\n                        this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n                        console.log('updateDepartmentStatus this.itemStatusDelivered', this.itemStatusDelivered);\r\n                        for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                            if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n                                let temparray = this.orders[i].step[m].step.split(' ');\r\n                                let num = Number(temparray[1]);\r\n                                let temp = {\r\n                                    tab: num - 1,\r\n                                    step: this.orders[i].step[m].step,\r\n                                }\r\n                                this.stepdata[this.orders[i]._id] = temp;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }).catch(error => {\r\n        });\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if(this.websocketService.socketEvent){\r\n            if (this.orders && this.orders.length) {\r\n                const change = this.differ.diff(this.orders);\r\n                if (change != null) {\r\n                    if (this.orders.length) {\r\n                        for (let i = 0; i < this.orders.length; i++) {\r\n                            if (this.orders[i]._id == this.websocketService.orderId) {\r\n                                let itemStatusDelivered = {};\r\n                                let remTime = {};\r\n                                for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                                    let startTemp = [];\r\n                                    for (let n = 0; n < this.orders[i].step[m].itemId.length; n++) {\r\n                                        startTemp.push(this.orders[i].step[m].itemId[n].status);\r\n                                    }\r\n                                    itemStatusDelivered[this.orders[i].step[m].step] = startTemp.every(this.isEqualToOne);\r\n                                }\r\n                                this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n                                console.log('ngDoCheck this.itemStatusDelivered', this.itemStatusDelivered);\r\n                                for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                                    if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n                                        let temparray = this.orders[i].step[m].step.split(' ');\r\n                                        let num = Number(temparray[1]);\r\n                                        let temp = {\r\n                                            tab: num - 1,\r\n                                            step: this.orders[i].step[m].step,\r\n                                        }\r\n                                        this.stepdata[this.orders[i]._id] = temp;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                                    if (this.orders[i].step[k].preparationTime) {\r\n                                        if ((this.orders[i].step[k].step == 'Uscita 1') && !this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[k].step]) {\r\n                                            let seconds = this.orders[i].step[k].preparationTime * 60;\r\n                                            let timeInterval = 1000;\r\n                                            let m = this.orders[i].step[k].preparationTime - 1;\r\n                                            let t = 0;\r\n                                            let s = 60;\r\n                                            var id = setInterval(() => {\r\n                                                t = t + 1;\r\n                                                seconds = seconds > 0 ? seconds - 1 : 0;\r\n                                                s = s > 0 ? s - 1 : 0;\r\n                                                if (seconds == 0) {\r\n                                                    clearInterval(id);\r\n                                                }\r\n                                                if (t == 60) {\r\n                                                    t = 0;\r\n                                                    if (m == 0) {\r\n                                                        m = 0;\r\n                                                        s = 0;\r\n                                                    } else {\r\n                                                        m = m - 1;\r\n                                                        s = 60;\r\n                                                    }\r\n                                                }\r\n                                                var minutes = m;\r\n                                        if(this.orders[i] && this.orders[i].step[k]){                                        \r\n                                                \r\n                                                remTime[this.orders[i].step[k].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n                                                }    }, timeInterval);\r\n                                        }\r\n                                        else if ((this.orders[i].step[k].step != 'Uscita 1') && (this.orders[i].stepStatus == this.orders[i].step[k].step) && !this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[k].step]) {\r\n                                            let seconds = this.orders[i].step[k].preparationTime * 60;\r\n                                            let timeInterval = 1000;\r\n                                            let m = this.orders[i].step[k].preparationTime - 1;\r\n                                            let t = 0;\r\n                                            let s = 60;\r\n                                            var id = setInterval(() => {\r\n                                                t = t + 1;\r\n                                                seconds = seconds > 0 ? seconds - 1 : 0;\r\n                                                s = s > 0 ? s - 1 : 0;\r\n                                                if (seconds == 0) {\r\n                                                    clearInterval(id);\r\n                                                }\r\n                                                if (t == 60) {\r\n                                                    t = 0;\r\n                                                    if (m == 0) {\r\n                                                        m = 0;\r\n                                                        s = 0;\r\n                                                    } else {\r\n                                                        m = m - 1;\r\n                                                        s = 60;\r\n                                                    }\r\n                                                }\r\n                                                var minutes = m;\r\n                                        if(this.orders[i] && this.orders[i].step[k]){                                        \r\n                                                \r\n                                                remTime[this.orders[i].step[k].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n                                             } }, timeInterval);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                this.remainingTime[this.orders[i]._id] = remTime;\r\n                                this.websocketService.orderId = '';\r\n                            break;                                \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.websocketService.socketEvent = false;\r\n        }\r\n    }\r\n\r\n    public changeTab(tab) {\r\n        this.changedTab = true;\r\n        this.activetab = tab;\r\n        this.websocketService.getOrders(this.activetab).then(data => {\r\n            this.orders = data;\r\n            if (this.orders.length) {\r\n                this.itemStatusDelivered = [];\r\n                for (let i = 0; i < this.orders.length; i++) {\r\n                    if (this.orders[i]) {\r\n                        let itemStatusDelivered = {};\r\n                        for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                            let startTemp = [];\r\n                            for (let l = 0; l < this.orders[i].step[k].itemId.length; l++) {\r\n                                startTemp.push(this.orders[i].step[k].itemId[l].status);\r\n                            }\r\n                            itemStatusDelivered[this.orders[i].step[k].step] = startTemp.every(this.isEqualToOne);\r\n                        }\r\n                        this.itemStatusDelivered[this.orders[i]._id] = itemStatusDelivered;\r\n                        console.log('changeTab this.itemStatusDelivered', this.itemStatusDelivered);\r\n                        for (let m = 0; m < this.orders[i].step.length; m++) {\r\n                            if (!this.itemStatusDelivered[this.orders[i]._id][this.orders[i].step[m].step]) {\r\n                                let temparray = this.orders[i].step[m].step.split(' ');\r\n                                let num = Number(temparray[1]);\r\n                                let temp = {\r\n                                    tab: num - 1,\r\n                                    step: this.orders[i].step[m].step,\r\n                                }\r\n                                this.stepdata[this.orders[i]._id] = temp;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.loadingOrders = false;\r\n        })\r\n            .catch(error => {\r\n            });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.ts","import { NgModule,NO_ERRORS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { OrderListComponent } from './order-list.component';\r\nimport { OrderListRouting } from './order-list.routes';\r\nimport { OrderListService } from './order-list.service';\r\nimport { WebsocketService } from '../../../service/websocket.service';\r\nimport { OrderByPipe } from '../../orderby';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OrderListRouting\r\n  ],\r\n  declarations: [OrderListComponent, OrderByPipe],\r\n  schemas: [ NO_ERRORS_SCHEMA ],\r\n  providers: [\r\n    WebsocketService,\r\n    OrderListService\r\n  ],\r\n})\r\nexport class OrderListModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.module.ts","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { OrderListComponent } from './order-list.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: OrderListComponent }\r\n];\r\n\r\n\r\nexport const OrderListRouting: ModuleWithProviders = RouterModule.forChild(routes); \r\n\n\n\n// WEBPACK FOOTER //\n// E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.routes.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable, Subject } from 'rxjs/Rx';\r\n@Injectable()\r\nexport class OrderListService {\r\n  orderList = [];\r\n  constructor(private http: Http) { \r\n    let url = '/api/department/orders';\r\n    this.http.get(url).toPromise()\r\n      .then(data => {\r\n        let res = data.json();\r\n        this.orderList = res.data;\r\n      })\r\n      .catch(error => {\r\n        this.orderList = [];\r\n      });\r\n  }\r\n\r\n  setOrder(data) {\r\n    this.orderList.push(data);\r\n  }\r\n\r\n  public extractData(res: Response) {\r\n    let body = res.json();\r\n    if (body.hasOwnProperty('error')) {\r\n      if (body.error.message === 'Token is required') {\r\n        this.logout();\r\n      } else {\r\n        return Promise.resolve(body || {});\r\n      }\r\n    } else {\r\n      return Promise.resolve(body || {});\r\n    }\r\n  }\r\n\r\n  private handleErrorPromise(error: Response | any) {\r\n    let body = error.json();\r\n    if (error.status === 400 || error.status === 401) {\r\n      return Promise.reject(body.message || error);\r\n    }\r\n    else {\r\n      this.logout();\r\n    }\r\n  }\r\n\r\n  private logout() {\r\n    localStorage.removeItem('isLoggedin');\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('token');\r\n    document.cookie = \"token=\" + '';\r\n    window.location.href = '/';\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.service.ts","//The pipe class implements the PipeTransform interface's transform method that accepts an input value and an optional array of parameters and returns the transformed value.\r\nimport { Pipe, PipeTransform } from \"@angular/core\";\r\n//We tell Angular that this is a pipe by applying the @Pipe decorator which we import from the core Angular library.\r\n@Pipe({\r\n    //The @Pipe decorator takes an object with a name property whose value is the pipe name that we'll use within a template expression. It must be a valid JavaScript identifier. Our pipe's name is orderby.\r\n    name: \"orderby\"\r\n})\r\nexport class OrderByPipe implements PipeTransform {\r\n    transform(array: Array<any>, args: string): Array<any> {\r\n        if (typeof args[0] === \"undefined\") {\r\n            return array;\r\n        }\r\n        let direction = args[0][0];\r\n        let column = args.replace('-','');\r\n        array.sort((a: any, b: any) => {\r\n            let left = Number(new Date(a[column]));\r\n            let right = Number(new Date(b[column]));\r\n            return (direction === \"-\") ? right - left : left - right;\r\n        });\r\n        return array;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// E:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/orderby.ts"],"sourceRoot":"webpack:///"}