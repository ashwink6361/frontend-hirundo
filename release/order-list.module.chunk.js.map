{"version":3,"sources":["D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.html","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.scss","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.ts","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.module.ts","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.routes.ts","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.service.ts","D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/orderby.ts"],"names":[],"mappings":"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","file":"order-list.module.chunk.js","sourcesContent":["module.exports = \"<!-- <div> -->\\r\\n<div class=\\\"text-center\\\" *ngIf=\\\"!(orders && orders.length)\\\">No Order Found.</div>\\r\\n<div *ngIf=\\\"orders && orders.length\\\" class=\\\"order-list-container\\\">\\r\\n    <div class=\\\"card order-list\\\" *ngFor=\\\"let order of orders | orderby: '-created_at'\\\">\\r\\n        <div class=\\\"card-body\\\" [class.opacity]=\\\"order.status == 3\\\">\\r\\n            <h4 class=\\\"card-title\\\">\\r\\n                <div>\\r\\n                    <i class=\\\"far fa-clock\\\"></i> {{order.created_at | date:'hh:mm a'}}</div>\\r\\n                <div class=\\\"status\\\" [class.bg-red]=\\\"order.status == 0\\\" [class.bg-green]=\\\"order.status == 2\\\" [class.bg-yellow]=\\\"order.status == 4\\\">{{getOrderStatus(order.status)}}</div>\\r\\n            </h4>\\r\\n            <div class=\\\"card-text\\\">\\r\\n                <p>\\r\\n                    <i class=\\\"fas fa-cube\\\"></i> {{order.room.name}}</p>\\r\\n                <p>\\r\\n                    <img src=\\\"assets/images/table.png\\\" alt=\\\"\\\">\\r\\n                    <span>{{order.tableName}}</span>\\r\\n                </p>\\r\\n                <p>\\r\\n                    <i class=\\\"far fa-user\\\"></i> {{order.noOfPeople}}</p>\\r\\n            </div>\\r\\n            <div class=\\\"step-listing\\\">\\r\\n                <ul *ngIf=\\\"stepdata[order._id]\\\">\\r\\n                    <li *ngFor=\\\"let step of order.step; let i = index;\\\" (click)=\\\"selectedTab(step.step,i,order._id)\\\" [class.active]=\\\"step.step == stepdata[order._id].step\\\" [class.completed]=\\\"step.status == 1\\\">{{step.step}}</li>\\r\\n                </ul>\\r\\n            </div>\\r\\n            <div class=\\\"order-items-container\\\">\\r\\n                <div *ngFor=\\\"let item of order.item\\\">\\r\\n                    <div *ngIf=\\\"((item.department.indexOf(authGuard.getCurrentUser()._id)) > -1) || ((authGuard.getCurrentUser().category.indexOf(item.category)) > -1)\\\">\\r\\n                        <div class=\\\"order-item\\\" *ngIf=\\\"stepdata[order._id] && item.step == stepdata[order._id].step\\\">\\r\\n                            <label class=\\\"label item-status\\\">{{getOrderStatus(item.status)}}</label>\\r\\n                            <div class=\\\"order-item-img\\\">\\r\\n                                {{item.quantity}} X\\r\\n                            </div>\\r\\n                            <div class=\\\"order-item-detail\\\">\\r\\n                                {{item.id.name}}\\r\\n                                <ul>\\r\\n                                    <li *ngFor=\\\"let varient of item.variant\\\">\\r\\n                                        <i *ngIf=\\\"varient.status == 1\\\">+</i>\\r\\n                                        <i *ngIf=\\\"varient.status == 0\\\">-</i> {{varient.name}}\\r\\n                                    </li>\\r\\n                                </ul>\\r\\n                            </div>\\r\\n                            <div class=\\\"order-quantity d-flex w-105\\\">\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-floting update-order-btn\\\" (click)=\\\"updateItem(item, order._id, 2)\\\">\\r\\n                                    <img src=\\\"assets/images/order-deliver.png\\\" alt=\\\"\\\" />\\r\\n                                </button>\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-floting update-order-btn\\\" (click)=\\\"updateItem(item, order._id, 4)\\\">\\r\\n                                    <i class=\\\"fas fa-sync-alt\\\"></i>\\r\\n                                </button>\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-floting update-order-btn\\\" (click)=\\\"updateItem(item, order._id, 3)\\\">\\r\\n                                    <i class=\\\"fas fa-times\\\"></i>\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <!-- <div class=\\\"btn-container\\\">\\r\\n                <button class=\\\"btn btn-primary waves-light\\\" mdbRippleRadius (click)=\\\"updateOrder(order, 3)\\\">Cancel</button>\\r\\n                <button class=\\\"btn btn-primary waves-light\\\" mdbRippleRadius (click)=\\\"updateOrder(order, 4)\\\">In Progress</button>\\r\\n                <button class=\\\"btn btn-primary waves-light\\\" mdbRippleRadius (click)=\\\"updateOrder(order, 2)\\\">Done</button>\\r\\n            </div> -->\\r\\n        </div>\\r\\n        <!-- <div class=\\\"order-call-btn\\\">\\r\\n            <button *ngIf=\\\"stepdata[order._id] && !showToCall[order._id][stepdata[order._id].step] && !showDeliveredButton[order._id][stepdata[order._id].step]\\\" type=\\\"submit\\\" (click)=\\\"updateStepItem(order, times[order._id][stepdata[order._id].step], 4)\\\" [disabled]=\\\"order.status == 4\\\"><span *ngIf=\\\"order.status == 0\\\">Start ({{times[order._id][stepdata[order._id].step]}}:00)</span><span *ngIf=\\\"order.status == 4\\\">Running {{remainingTime[order._id][stepdata[order._id].step]}}</span></button>\\r\\n            <button *ngIf=\\\"stepdata[order._id] && !showToCall[order._id][stepdata[order._id].step] && showDeliveredButton[order._id][stepdata[order._id].step]\\\" type=\\\"submit\\\" (click)=\\\"updateStepItem(order, times[order._id][stepdata[order._id].step], 1)\\\">Delivered</button>\\r\\n            <div *ngIf=\\\"stepdata[order._id] && !showToCall[order._id][stepdata[order._id].step] && !showDeliveredButton[order._id][stepdata[order._id].step]\\\" id=\\\"{{order._id}}_{{stepdata[order._id].step}}\\\" class=\\\"progress-btn\\\"></div>\\r\\n            <button *ngIf=\\\"stepdata[order._id] && showToCall[order._id][stepdata[order._id].step] && !showDeliveredButton[order._id][stepdata[order._id].step]\\\" type=\\\"submit\\\" [disabled]=\\\"true\\\">To Call ({{times[order._id][stepdata[order._id].step]}}:00)</button>\\r\\n        </div> -->\\r\\n        <div class=\\\"order-call-btn\\\" *ngIf=\\\"order.step.length\\\">\\r\\n            <div *ngFor=\\\"let step of order.step; let indx = index;\\\">\\r\\n                <div *ngIf=\\\"stepdata[order._id].step == step.step\\\">\\r\\n                    <button type=\\\"submit\\\" *ngIf=\\\"stepdata[order._id] && (order.stepStatus == stepdata[order._id].step) && (step.status != 4) && (step.status != 5)\\\" (click)=\\\"updateStepItem(step,indx, order, times[order._id][stepdata[order._id].step], 4)\\\">Start ({{times[order._id][stepdata[order._id].step]}}:00)</button>                    \\r\\n                    <button type=\\\"submit\\\" *ngIf=\\\"step.status == 0 && (step.step == 'Uscita 1')\\\" (click)=\\\"updateStepItem(step,indx, order, times[order._id][stepdata[order._id].step], 4)\\\">Start ({{times[order._id][stepdata[order._id].step]}}:00)</button>\\r\\n                    <div class=\\\"running-label\\\" *ngIf=\\\"stepdata[order._id] && (step.step == stepdata[order._id].step) && (step.status == 4)\\\"><span class=\\\"running\\\">Running {{remainingTime[order._id][stepdata[order._id].step]}}</span></div>\\r\\n                    <button *ngIf=\\\"stepdata[order._id] && (step.step == stepdata[order._id].step) && (step.status == 5)\\\" type=\\\"submit\\\" (click)=\\\"updateStepItem(step,indx, order, times[order._id][stepdata[order._id].step], 1)\\\">Completed</button>\\r\\n                    <div *ngIf=\\\"stepdata[order._id] && (step.step == stepdata[order._id].step) && (step.status == 4)\\\" id=\\\"{{step.step.replace(' ','')+order._id+indx}}\\\" [ngStyle]=\\\"{'width': barWidth[step.step.replace(' ','')+order._id+indx]}\\\" class=\\\"progress-btn\\\"></div>\\r\\n                    <button class=\\\"bg-yellow\\\" *ngIf=\\\"stepdata[order._id] && (step.step != 'Uscita 1') && (step.status == 0) && (order.stepStatus != stepdata[order._id].step)\\\" type=\\\"submit\\\" [disabled]=\\\"true\\\">To Call ({{times[order._id][stepdata[order._id].step]}}:00)</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<!-- </div> -->\\r\\n\\r\\n\\r\\n<!-- <div class=\\\"text-center\\\" *ngIf=\\\"!(orders && orders.length)\\\">No Order Found.</div>\\r\\n<div *ngIf=\\\"orders && orders.length\\\" class=\\\"order-list-container\\\">\\r\\n    <div class=\\\"card order-list\\\" *ngFor=\\\"let order of orders | orderby: '-created_at'\\\">\\r\\n        <div class=\\\"card-body\\\" [class.opacity]=\\\"order.status == 3\\\">\\r\\n            <h4 class=\\\"card-title\\\">\\r\\n                <div>\\r\\n                    <i class=\\\"far fa-clock\\\"></i> {{order.created_at | date:'hh:mm a'}}</div>\\r\\n                <div class=\\\"status\\\" [class.bg-red]=\\\"order.status == 0\\\" [class.bg-green]=\\\"order.status == 2\\\" [class.bg-yellow]=\\\"order.status == 4\\\">{{getOrderStatus(order.status)}}</div>\\r\\n            </h4>\\r\\n            <div class=\\\"card-text\\\">\\r\\n                <p>\\r\\n                    <i class=\\\"fas fa-cube\\\"></i> {{order.room.name}}</p>\\r\\n                <p>\\r\\n                    <img src=\\\"assets/images/table.png\\\" alt=\\\"\\\">\\r\\n                    <span>{{order.tableName}}</span>\\r\\n                </p>\\r\\n                <p>\\r\\n                    <i class=\\\"far fa-user\\\"></i> {{order.noOfPeople}}</p>\\r\\n            </div> -->\\r\\n            <!-- <div class=\\\"step-listing\\\">\\r\\n                <ul>\\r\\n                    <li *ngFor=\\\"let step of order.step; let i = index;\\\" (click)=\\\"selectedTab(step,i,order)\\\" [class.active]=\\\"step.active\\\" [class.completed]=\\\"step.status == 1\\\">{{step.step}}</li>\\r\\n                </ul>\\r\\n            </div> -->\\r\\n            <!-- <div class=\\\"order-items-container\\\" *ngFor=\\\"let step of order.step; let i = index;\\\">\\r\\n                <div class=\\\"step-listing\\\">\\r\\n                    <ul>\\r\\n                        <li (click)=\\\"selectedTab(step,i,order)\\\" [class.active]=\\\"step.active\\\" [class.completed]=\\\"step.status == 1\\\">{{step.step}}</li>\\r\\n                    </ul>\\r\\n                </div>\\r\\n                <div *ngFor=\\\"let item of order.item\\\">\\r\\n                    <div *ngIf=\\\"((item.department.indexOf(authGuard.getCurrentUser()._id)) > -1) || ((authGuard.getCurrentUser().category.indexOf(item.category)) > -1)\\\">\\r\\n                        <div class=\\\"order-item\\\" *ngIf=\\\"item.step == step.step\\\">\\r\\n                            <label class=\\\"label item-status\\\">{{getOrderStatus(item.status)}}</label>\\r\\n                            <div class=\\\"order-item-img\\\">\\r\\n                                {{item.quantity}} X\\r\\n                            </div>\\r\\n                            <div class=\\\"order-item-detail\\\">\\r\\n                                {{item.id.name}}\\r\\n                                <ul>\\r\\n                                    <li *ngFor=\\\"let varient of item.variant\\\">\\r\\n                                        <i *ngIf=\\\"varient.status == 1\\\">+</i>\\r\\n                                        <i *ngIf=\\\"varient.status == 0\\\">-</i> {{varient.name}}\\r\\n                                    </li>\\r\\n                                </ul>\\r\\n                            </div>\\r\\n                            <div class=\\\"order-quantity d-flex w-105\\\">\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-floting update-order-btn\\\" (click)=\\\"updateItem(step.step,item, order._id, 2)\\\">\\r\\n                                    <img src=\\\"assets/images/order-deliver.png\\\" alt=\\\"\\\" />\\r\\n                                </button>\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-floting update-order-btn\\\" (click)=\\\"updateItem(step.step,item, order._id, 4)\\\">\\r\\n                                    <i class=\\\"fas fa-sync-alt\\\"></i>\\r\\n                                </button>\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-floting update-order-btn\\\" (click)=\\\"updateItem(step.step,item, order._id, 3)\\\">\\r\\n                                    <i class=\\\"fas fa-times\\\"></i>\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"order-call-btn\\\" *ngIf=\\\"order.step.length\\\">\\r\\n            <div *ngFor=\\\"let step of order.step; let indx = index;\\\">\\r\\n                <div *ngIf=\\\"step.active\\\">\\r\\n                    <button type=\\\"submit\\\" *ngIf=\\\"step.status == 0\\\" (click)=\\\"updateStepItem(step.step,indx, order, times[order._id][step.step], 4)\\\">Start ({{times[order._id][step.step]}}:00)</button>\\r\\n                    <div class=\\\"running-label\\\" *ngIf=\\\"step.active && (step.status == 4)\\\"><span class=\\\"running\\\">Running {{remainingTime[order._id][step.step]}}</span></div>\\r\\n                    <button *ngIf=\\\"step.active && (step.status == 5)\\\" type=\\\"submit\\\" (click)=\\\"updateStepItem(step.step,indx, order, times[order._id][step.step], 1)\\\">Completed</button>\\r\\n                    <div *ngIf=\\\"step.active && (step.status == 4)\\\" id=\\\"{{step.step.replace(' ','')+order._id+indx}}\\\" [ngStyle]=\\\"{'width': barWidth[step.step.replace(' ','')+order._id+indx]}\\\" class=\\\"progress-btn\\\"></div>\\r\\n                    <button class=\\\"bg-yellow\\\" *ngIf=\\\"step.active && (step.status == 1)\\\" type=\\\"submit\\\" [disabled]=\\\"true\\\">To Call ({{times[order._id][step.step]}}:00)</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n -->\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.html\n// module id = ../../../../../src/app/hirundo/department/order-list/order-list.component.html\n// module chunks = order-list.module","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.scss\n// module id = ../../../../../src/app/hirundo/department/order-list/order-list.component.scss\n// module chunks = order-list.module","import { Component, OnInit, IterableDiffers, Input, DoCheck } from '@angular/core';\r\nimport { OrderByPipe } from '../../orderby';\r\nimport { OrderListService } from './order-list.service';\r\nimport { WebsocketService } from '../../../service/websocket.service';\r\nimport { AuthGuard } from '../../../shared/guard/auth.guard';\r\nimport *  as _ from 'lodash';\r\n@Component({\r\n    selector: 'app-order-list',\r\n    templateUrl: './order-list.component.html',\r\n    styleUrls: ['./order-list.component.scss']\r\n})\r\n\r\nexport class OrderListComponent implements DoCheck {\r\n    @Input() orders: Array<any> = [];\r\n    differ: any;\r\n    // public orders: Array<any> = [];\r\n    public clock: any;\r\n    public tick: any;\r\n    public loadingOrders: boolean = true;\r\n    public steps: Array<any> = [];\r\n    public activetab: boolean[] = [];\r\n    public stepdata: Array<any> = [];\r\n    public orderId: Array<any> = [];\r\n    public times: Array<any> = [];\r\n    // public showDeliveredButton: Array<any> = [];\r\n    // public showToCall: Array<any> = [];\r\n    public remainingTime: Array<any> = [];\r\n    public orderStepData: {};\r\n    public barWidth: Array<any> = [];\r\n    constructor(public websocketService: WebsocketService, public authGuard: AuthGuard,private differs: IterableDiffers) {\r\n        this.differ = differs.find([]).create(null);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.websocketService.getOrders().then(data => {\r\n            this.orders = data;\r\n            if (this.orders.length) {\r\n                for (let i = 0; i < this.orders.length; i++) {\r\n                    let time = {};\r\n                    let remtime = {};\r\n                    for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                        let temp = [];\r\n                        for (let l = 0; l < this.orders[i].item.length; l++) {\r\n                            if (this.orders[i].item[l].step == this.orders[i].step[k].step && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\r\n                                temp.push(this.orders[i].item[l].id.preparationTime);\r\n                            }\r\n                        }\r\n                        time[this.orders[i].step[k].step] = Math.max(...temp);\r\n                        remtime[this.orders[i].step[k].step] = '0:00';\r\n                        if(this.orders[i].step[k].status == 1){\r\n                            let temparray = this.orders[i].step[k].step.split(' ');\r\n                            let num = Number(temparray[1]);\r\n                            let stepTemp = temparray[0]+' '+ ++num;\r\n                            let temp = {\r\n                                tab: num,\r\n                                step: stepTemp,\r\n                            }\r\n                            this.stepdata[this.orders[i]._id] = temp;\r\n                        }else{\r\n                            let tempp = {\r\n                                tab: 0,\r\n                                step: ''\r\n                            }\r\n                            tempp.tab = 0;\r\n                            tempp.step = this.orders[i].step[0].step;\r\n                            this.stepdata[this.orders[i]._id] = tempp;\r\n                        }\r\n                        \r\n                    }\r\n                    // this.orderId.push(this.orders[i]._id);\r\n                    // let step = [];\r\n                    // for (let j = 0; j < this.orders[i].item.length; j++) {\r\n                    //     if (((this.orders[i].item[j].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(this.orders[i].item[j].category)) > -1)) {\r\n                    //         if (step.length) {\r\n                    //             for (let b = 0; b < step.length; b++) {\r\n                    //                 if (step[b].value !== this.orders[i].item[j].step) {\r\n                    //                     let key = this.orders[i].item[j].step.split(' ');\r\n                    //                     let newKey = Number(key[1]);\r\n                    //                     let value = this.orders[i].item[j].step;\r\n                    //                     step.push({ id: newKey, value: value });\r\n                    //                 }\r\n                    //             }\r\n                    //         }\r\n                    //         if (!step.length) {\r\n                    //             let key = this.orders[i].item[j].step.split(' ');\r\n                    //             let newKey = Number(key[1]);\r\n                    //             let value = this.orders[i].item[j].step;\r\n                    //             step.push({ id: newKey, value: value });\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                    // step.sort(function (a, b) {\r\n                    //     return a.id - b.id\r\n                    // });\r\n                    // step = _.uniqBy(step, 'value');\r\n                    // this.steps[this.orders[i]._id] = step;\r\n                    // let time = {};\r\n                    // let remtime = {};\r\n                    // for (let k = 0; k < this.steps[this.orders[i]._id].length; k++) {\r\n                    //     let temp = [];\r\n                    //     for (let l = 0; l < this.orders[i].item.length; l++) {\r\n                    //         if (this.orders[i].item[l].step == this.steps[this.orders[i]._id][k].value && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\r\n                    //             temp.push(this.orders[i].item[l].id.preparationTime);\r\n                    //         }\r\n                    //     }\r\n                    //     time[this.steps[this.orders[i]._id][k].value] = Math.max(...temp);\r\n                    //     remtime[this.steps[this.orders[i]._id][k].value] = '0:00';\r\n                    // }\r\n                    this.times[this.orders[i]._id] = time;\r\n                    this.remainingTime[this.orders[i]._id] = remtime;\r\n                }\r\n                // if (this.orderId && this.orderId.length) {\r\n                //     for (let k = 0; k < this.orderId.length; k++) {\r\n                //         let temp = {\r\n                //             tab: 0,\r\n                //             step: ''\r\n                //         }\r\n                //         temp.tab = 0;\r\n                //         temp.step = this.steps[this.orderId[k]][0].value;\r\n                //         this.stepdata[this.orderId[k]] = temp;\r\n                //     }\r\n                // }\r\n            }\r\n            this.loadingOrders = false;\r\n        })\r\n            .catch(error => {\r\n                console.log('error', error);\r\n            });\r\n        this.tick = setInterval(() => {\r\n            this.clock = Date.now();\r\n        }, 1000);\r\n    }\r\n\r\n    public getOrderStatus(status) {\r\n        var str = 'In progress';\r\n        switch (status) {\r\n            case 0:\r\n                str = 'New order'; break;\r\n            case 1:\r\n                str = 'Delivered'; break;\r\n            case 2:\r\n                str = 'Prepared'; break;\r\n            case 3:\r\n                str = 'Cancelled'; break;\r\n            case 4:\r\n                str = 'In progress'; break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return str;\r\n    };\r\n\r\n    public updateOrder(order, time, status) {        \r\n        order.status = status;\r\n        let items = [];\r\n        for (let i = 0; i < order.item.length; i++) {\r\n            for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n                if (order.item[i].category == this.authGuard.getCurrentUser().category[k]) {\r\n                    items.push(order.item[i].id._id)\r\n                }\r\n            }\r\n        }\r\n        let opts = {\r\n            status: status,\r\n            itemId: items\r\n        };\r\n        this.websocketService.updateOrder(order._id, opts).then(data => {\r\n            console.log(\"updateOrder dept Order updated++++++++++++++++\", data);\r\n        }).catch(error => {\r\n            console.log(\"error\", error);\r\n        });\r\n    };\r\n\r\n    public updateItem(item, order, status) {\r\n        item.status = status;\r\n        let items = [];\r\n        items.push(item.id._id)\r\n        let opts = {\r\n            status: status,\r\n            itemId: items,\r\n            step: this.stepdata[order._id].step\r\n        };\r\n        this.websocketService.updateOrder(order, opts).then(data => {\r\n            console.log(\"updateItem dept item updated+++++++++++++\", data);\r\n        }).catch(error => {\r\n            console.log(\"error\", error);\r\n        });\r\n    };\r\n\r\n    public updateStepItem(step, index, order, time, status) {\r\n        let m = time - 1;\r\n        let seconds = time * 60;\r\n        let w = parseFloat((100 / seconds).toFixed(2));\r\n        let timeInterval = 1000;\r\n        let t = 0;\r\n        let s = 60;\r\n        var width = 0;\r\n        var id = setInterval(() => {\r\n            if(order.status != 1 && step.step == this.stepdata[order._id].step){\r\n                t = t + 1;\r\n                seconds = seconds - 1;\r\n                s = s - 1;\r\n                if (seconds == 0 && order.status != 1 && step.step == this.stepdata[order._id].step) {\r\n                    clearInterval(id);\r\n                    let items = [];\r\n                    for (let i = 0; i < order.item.length; i++) {\r\n                        for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n                            if (((order.item[i].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(order.item[i].category)) > -1)) {\r\n                                if (order.item[i].step == this.stepdata[order._id].step) {\r\n                                    order.item[i].status = status;\r\n                                    if (items.indexOf(order.item[i].id._id) < 0) {\r\n                                        items.push(order.item[i].id._id)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    let temp = {\r\n                        status: 5,\r\n                        itemId: items,\r\n                        step: this.stepdata[order._id].step\r\n                    };\r\n                        this.websocketService.updateOrder(order._id, temp).then(data => {\r\n                            order.status = data.data.status;\r\n                            for (let i = 0; i < this.orders.length; i++) {\r\n                                if (this.orders[i]._id == data.data._id) {\r\n                                    this.orders[i].step = data.data.step;\r\n                                }\r\n                            }\r\n                        }).catch(error => {\r\n                            console.log(\"error\", error);\r\n                        });\r\n                } else {\r\n                    width = width + w;\r\n                    if (width < 100) {\r\n                        this.barWidth[step.step.replace(' ', '')+order._id+index] = width + '%';\r\n                    } else {\r\n                        this.barWidth[step.step.replace(' ', '')+order._id+index] = '100%';\r\n                    }\r\n                }\r\n                if (t == 60) {\r\n                    t = 0;\r\n                    if(m==0) {\r\n                        m = 0;\r\n                        s = 0;\r\n                    } else {\r\n                        m = m-1;\r\n                        s = 60;\r\n                    }\r\n                }\r\n                var minutes = m;\r\n                this.remainingTime[order._id][this.stepdata[order._id].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n            }\r\n        }, timeInterval);\r\n\r\n        let items = [];\r\n        for (let i = 0; i < order.item.length; i++) {\r\n            for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n                if (((order.item[i].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(order.item[i].category)) > -1)) {\r\n                    if (order.item[i].step == this.stepdata[order._id].step) {\r\n                        order.item[i].status = status;\r\n                        if (items.indexOf(order.item[i].id._id) < 0) {\r\n                            items.push(order.item[i].id._id)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let opts = {\r\n            status: status,\r\n            itemId: items,\r\n            step: this.stepdata[order._id].step\r\n        };\r\n        this.websocketService.updateOrder(order._id, opts).then(data => {\r\n            order.status = data.data.status;\r\n            order.step = data.data.step;\r\n            if (order.step) {\r\n                for (let j = 0; j < order.step.length - 1; j++) {\r\n                    if (order.step[j].status == 1) {\r\n                        let temparray = order.step[j].step.split(' ');\r\n                        let num = Number(temparray[1]);\r\n                        let stepTemp = temparray[0] + ' ' + ++num;\r\n                        let temp = {\r\n                            tab: num,\r\n                            step: stepTemp,\r\n                        }\r\n                        this.stepdata[order._id] = temp;\r\n                    }\r\n                }\r\n            }\r\n        }).catch(error => {\r\n            console.log(\"error\", error);\r\n        });\r\n    };\r\n\r\n    selectedTab(step, tab, orderId) {\r\n        let temp = {\r\n            tab: tab,\r\n            step: step\r\n        }\r\n        this.stepdata[orderId] = temp;        \r\n    }\r\n\r\n    ngDoCheck() {\r\n        const change = this.differ.diff(this.orders);\r\n        if (change != null) {\r\n            if (this.orders.length) {\r\n                for (let i = 0; i < this.orders.length; i++) {\r\n                    let time = {};\r\n                    let remtime = {};\r\n                    for (let k = 0; k < this.orders[i].step.length; k++) {\r\n                        let temp = [];\r\n                        for (let l = 0; l < this.orders[i].item.length; l++) {\r\n                            if (this.orders[i].item[l].step == this.orders[i].step[k].step && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\r\n                                temp.push(this.orders[i].item[l].id.preparationTime);\r\n                            }\r\n                        }\r\n                        time[this.orders[i].step[k].step] = Math.max(...temp);\r\n                        remtime[this.orders[i].step[k].step] = '0:00';\r\n                        let tempp = {\r\n                            tab: 0,\r\n                            step: ''\r\n                        }\r\n                        tempp.tab = 0;\r\n                        tempp.step = this.orders[i].step[0].step;\r\n                        this.stepdata[this.orders[i]._id] = tempp;\r\n                    }\r\n                    this.times[this.orders[i]._id] = time;\r\n                    this.remainingTime[this.orders[i]._id] = remtime;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// import { Component, OnInit, IterableDiffers, Input, DoCheck } from '@angular/core';\r\n// import { OrderByPipe } from '../../orderby';\r\n// import { OrderListService } from './order-list.service';\r\n// import { WebsocketService } from '../../../service/websocket.service';\r\n// import { AuthGuard } from '../../../shared/guard/auth.guard';\r\n// import *  as _ from 'lodash';\r\n// @Component({\r\n//     selector: 'app-order-list',\r\n//     templateUrl: './order-list.component.html',\r\n//     styleUrls: ['./order-list.component.scss']\r\n// })\r\n\r\n// export class OrderListComponent implements DoCheck {\r\n//     @Input() orders: Array<any> = [];\r\n//     differ: any;\r\n//     // public orders: Array<any> = [];\r\n//     public clock: any;\r\n//     public tick: any;\r\n//     public loadingOrders: boolean = true;\r\n//     public steps: Array<any> = [];\r\n//     public activetab: boolean[] = [];\r\n//     public stepdata: Array<any> = [];\r\n//     public orderId: Array<any> = [];\r\n//     public times: Array<any> = [];\r\n//     // public showDeliveredButton: Array<any> = [];\r\n//     // public showToCall: Array<any> = [];\r\n//     public remainingTime: Array<any> = [];\r\n//     public orderStepData: {};\r\n//     public barWidth: Array<any> = [];\r\n//     public iterableDiffer: any;\r\n//     // public remainingTime: Array<any> = ['0:00'];\r\n//     // public showDeliveredButton: boolean[] = [false]; \r\n//     // public showToCall: boolean[] = [false];     \r\n//     // public times = {};          \r\n//     constructor(public websocketService: WebsocketService, public authGuard: AuthGuard,private differs: IterableDiffers) {\r\n//         this.differ = differs.find([]).create(null);    }\r\n\r\n//     ngOnInit() {\r\n//         this.websocketService.getOrders().then(data => {\r\n//             this.orders = data;\r\n//             console.log(this.orders, 'orderlist pagfe')\r\n//             if (this.orders.length) {\r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     // this.orderId.push(this.orders[i]._id);\r\n//                     // let step = [];\r\n//                     // for (let j = 0; j < this.orders[i].item.length; j++) {\r\n//                     //     if (((this.orders[i].item[j].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(this.orders[i].item[j].category)) > -1)) {\r\n//                     //         if (step.length) {\r\n//                     //             for (let b = 0; b < step.length; b++) {\r\n//                     //                 if (step[b].value !== this.orders[i].item[j].step) {\r\n//                     //                     let key = this.orders[i].item[j].step.split(' ');\r\n//                     //                     let newKey = Number(key[1]);\r\n//                     //                     let value = this.orders[i].item[j].step;\r\n//                     //                     step.push({ id: newKey, value: value });\r\n//                     //                 }\r\n//                     //             }\r\n//                     //         }\r\n//                     //         if (!step.length) {\r\n//                     //             let key = this.orders[i].item[j].step.split(' ');\r\n//                     //             let newKey = Number(key[1]);\r\n//                     //             let value = this.orders[i].item[j].step;\r\n//                     //             step.push({ id: newKey, value: value });\r\n//                     //         }\r\n//                     //     }\r\n//                     // }\r\n//                     // step.sort(function (a, b) {\r\n//                     //     return a.id - b.id\r\n//                     // });\r\n//                     // step = _.uniqBy(step, 'value');\r\n//                     // this.steps[this.orders[i]._id] = step;\r\n//                     let time = {};\r\n//                     let remtime = {};\r\n//                     for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                         let temp = [];\r\n//                         for (let l = 0; l < this.orders[i].item.length; l++) {\r\n//                             if (this.orders[i].item[l].step == this.orders[i].step[k].step && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\r\n//                                 temp.push(this.orders[i].item[l].id.preparationTime);\r\n//                             }\r\n//                         }\r\n//                         time[this.orders[i].step[k].step] = Math.max(...temp);\r\n//                         remtime[this.orders[i].step[k].step] = '0:00';\r\n//                         // let tempp = {\r\n//                         //     tab: 0,\r\n//                         //     step: ''\r\n//                         // }\r\n//                         // tempp.tab = 0;\r\n//                         // tempp.step = this.orders[i].step[0].step;\r\n//                         // this.stepdata[this.orders[i]._id] = tempp;\r\n//                     }\r\n//                     this.times[this.orders[i]._id] = time;\r\n//                     console.log('this.times',this.times);\r\n//                     this.remainingTime[this.orders[i]._id] = remtime;\r\n//                     // let time = {};\r\n//                     // let delivered = {};\r\n//                     // let call = {};\r\n//                     // let remtime = {};\r\n//                     // for (let k = 0; k < this.steps[this.orders[i]._id].length; k++) {\r\n//                     //     let temp = [];\r\n//                     //     for (let l = 0; l < this.orders[i].item.length; l++) {\r\n//                     //         if (this.orders[i].item[l].step == this.steps[this.orders[i]._id][k].value && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\r\n//                     //             temp.push(this.orders[i].item[l].id.preparationTime);\r\n//                     //         }\r\n//                     //     }\r\n//                     //     time[this.steps[this.orders[i]._id][k].value] = Math.max(...temp);\r\n//                     //     delivered[this.steps[this.orders[i]._id][k].value] = false;\r\n//                     //     call[this.steps[this.orders[i]._id][k].value] = false;\r\n//                     //     remtime[this.steps[this.orders[i]._id][k].value] = '0:00';\r\n//                     // } \r\n//                     // this.times[this.orders[i]._id] = time;\r\n//                     // this.showDeliveredButton[this.orders[i]._id] = delivered;\r\n//                     // this.showToCall[this.orders[i]._id] = call;\r\n//                     // this.remainingTime[this.orders[i]._id] = remtime;\r\n//                 }\r\n//                 // if (this.orderId && this.orderId.length) {\r\n//                 //     for (let k = 0; k < this.orderId.length; k++) {\r\n//                 //         let temp = {\r\n//                 //             tab: 0,\r\n//                 //             step: ''\r\n//                 //         }\r\n//                 //         temp.tab = 0;\r\n//                 //         temp.step = this.steps[this.orderId[k]][0].value;\r\n//                 //         this.stepdata[this.orderId[k]] = temp;\r\n//                 //     }\r\n//                 // }\r\n//                 // if (this.orders && this.orders.length) {\r\n//                 //     for (let k = 0; k < this.orders.length; k++) {\r\n//                 //         if(this.orders[k].stepStatus != null){\r\n//                 //             var tabTemp =this.orders[k].stepStatus.split(' ')[1];\r\n//                 //             let temp = {\r\n//                 //                 tab: tabTemp + 1,\r\n//                 //                 step: this.orders[k].stepStatus,\r\n//                 //             }\r\n//                 //             this.stepdata[this.orders[k]._id] = temp;\r\n//                 //         }\r\n//                 //     }\r\n//                 // }\r\n//             }\r\n//             this.loadingOrders = false;\r\n//         })\r\n//             .catch(error => {\r\n//                 console.log('error', error);\r\n//             });\r\n//         this.tick = setInterval(() => {\r\n//             this.clock = Date.now();\r\n//         }, 1000);\r\n//     }\r\n\r\n//     ngDoCheck() {\r\n//         const change = this.differ.diff(this.orders);\r\n//         console.log('changes detedcted',change);\r\n//         if(change != null){\r\n//             if (this.orders.length) {\r\n//                 for (let i = 0; i < this.orders.length; i++) {\r\n//                     // this.orderId.push(this.orders[i]._id);\r\n//                     // let step = [];\r\n//                     // for (let j = 0; j < this.orders[i].item.length; j++) {\r\n//                     //     if (((this.orders[i].item[j].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(this.orders[i].item[j].category)) > -1)) {\r\n//                     //         if (step.length) {\r\n//                     //             for (let b = 0; b < step.length; b++) {\r\n//                     //                 if (step[b].value !== this.orders[i].item[j].step) {\r\n//                     //                     let key = this.orders[i].item[j].step.split(' ');\r\n//                     //                     let newKey = Number(key[1]);\r\n//                     //                     let value = this.orders[i].item[j].step;\r\n//                     //                     step.push({ id: newKey, value: value });\r\n//                     //                 }\r\n//                     //             }\r\n//                     //         }\r\n//                     //         if (!step.length) {\r\n//                     //             let key = this.orders[i].item[j].step.split(' ');\r\n//                     //             let newKey = Number(key[1]);\r\n//                     //             let value = this.orders[i].item[j].step;\r\n//                     //             step.push({ id: newKey, value: value });\r\n//                     //         }\r\n//                     //     }\r\n//                     // }\r\n//                     // step.sort(function (a, b) {\r\n//                     //     return a.id - b.id\r\n//                     // });\r\n//                     // step = _.uniqBy(step, 'value');\r\n//                     // this.steps[this.orders[i]._id] = step;\r\n//                     let time = {};\r\n//                     let remtime = {};\r\n//                     for (let k = 0; k < this.orders[i].step.length; k++) {\r\n//                         let temp = [];\r\n//                         for (let l = 0; l < this.orders[i].item.length; l++) {\r\n//                             if (this.orders[i].item[l].step == this.orders[i].step[k].step && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\r\n//                                 temp.push(this.orders[i].item[l].id.preparationTime);\r\n//                             }\r\n//                         }\r\n//                         time[this.orders[i].step[k].step] = Math.max(...temp);\r\n//                         remtime[this.orders[i].step[k].step] = '0:00';\r\n//                         // let tempp = {\r\n//                         //     tab: 0,\r\n//                         //     step: ''\r\n//                         // }\r\n//                         // tempp.tab = 0;\r\n//                         // tempp.step = this.orders[i].step[0].step;\r\n//                         // this.stepdata[this.orders[i]._id] = tempp;\r\n//                     }\r\n//                     this.times[this.orders[i]._id] = time;\r\n//                     console.log('this.times',this.times);\r\n//                     this.remainingTime[this.orders[i]._id] = remtime;\r\n//                     // let time = {};\r\n//                     // let delivered = {};\r\n//                     // let call = {};\r\n//                     // let remtime = {};\r\n//                     // for (let k = 0; k < this.steps[this.orders[i]._id].length; k++) {\r\n//                     //     let temp = [];\r\n//                     //     for (let l = 0; l < this.orders[i].item.length; l++) {\r\n//                     //         if (this.orders[i].item[l].step == this.steps[this.orders[i]._id][k].value && temp.indexOf(this.orders[i].item[l].id.preparationTime) < 0) {\r\n//                     //             temp.push(this.orders[i].item[l].id.preparationTime);\r\n//                     //         }\r\n//                     //     }\r\n//                     //     time[this.steps[this.orders[i]._id][k].value] = Math.max(...temp);\r\n//                     //     delivered[this.steps[this.orders[i]._id][k].value] = false;\r\n//                     //     call[this.steps[this.orders[i]._id][k].value] = false;\r\n//                     //     remtime[this.steps[this.orders[i]._id][k].value] = '0:00';\r\n//                     // } \r\n//                     // this.times[this.orders[i]._id] = time;\r\n//                     // this.showDeliveredButton[this.orders[i]._id] = delivered;\r\n//                     // this.showToCall[this.orders[i]._id] = call;\r\n//                     // this.remainingTime[this.orders[i]._id] = remtime;\r\n//                 }\r\n//                 // if (this.orderId && this.orderId.length) {\r\n//                 //     for (let k = 0; k < this.orderId.length; k++) {\r\n//                 //         let temp = {\r\n//                 //             tab: 0,\r\n//                 //             step: ''\r\n//                 //         }\r\n//                 //         temp.tab = 0;\r\n//                 //         temp.step = this.steps[this.orderId[k]][0].value;\r\n//                 //         this.stepdata[this.orderId[k]] = temp;\r\n//                 //     }\r\n//                 // }\r\n//                 // if (this.orders && this.orders.length) {\r\n//                 //     for (let k = 0; k < this.orders.length; k++) {\r\n//                 //         if(this.orders[k].stepStatus != null){\r\n//                 //             var tabTemp =this.orders[k].stepStatus.split(' ')[1];\r\n//                 //             let temp = {\r\n//                 //                 tab: tabTemp + 1,\r\n//                 //                 step: this.orders[k].stepStatus,\r\n//                 //             }\r\n//                 //             this.stepdata[this.orders[k]._id] = temp;\r\n//                 //         }\r\n//                 //     }\r\n//                 // }\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     public getOrderStatus(status) {\r\n//         var str = 'In progress';\r\n//         switch (status) {\r\n//             case 0:\r\n//                 str = 'New order'; break;\r\n//             case 1:\r\n//                 str = 'Delivered'; break;\r\n//             case 2:\r\n//                 str = 'Prepared'; break;\r\n//             case 3:\r\n//                 str = 'Cancelled'; break;\r\n//             case 4:\r\n//                 str = 'In progress'; break;\r\n//             default:\r\n//                 break;\r\n//         }\r\n\r\n//         return str;\r\n//     };\r\n\r\n//     public updateOrder(order, time, status) {        \r\n//         order.status = status;\r\n//         let items = [];\r\n//         for (let i = 0; i < order.item.length; i++) {\r\n//             for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n//                 if (order.item[i].category == this.authGuard.getCurrentUser().category[k]) {\r\n//                     items.push(order.item[i].id._id)\r\n//                 }\r\n//             }\r\n//         }\r\n//         let opts = {\r\n//             status: status,\r\n//             itemId: items\r\n//         };\r\n//         this.websocketService.updateOrder(order._id, opts).then(data => {\r\n//             console.log(\"updateOrder dept Order updated++++++++++++++++\", data);\r\n//         }).catch(error => {\r\n//             console.log(\"error\", error);\r\n//         });\r\n//     };\r\n\r\n//     public updateItem(step,item, order, status) {\r\n//         item.status = status;\r\n//         let items = [];\r\n//         items.push(item.id._id)\r\n//         let opts = {\r\n//             status: status,\r\n//             itemId: items,\r\n//             step: step\r\n//         };\r\n//         this.websocketService.updateOrder(order, opts).then(data => {\r\n//             console.log(\"updateItem dept item updated+++++++++++++\", data);\r\n//         }).catch(error => {\r\n//             console.log(\"error\", error);\r\n//         });\r\n//     };\r\n\r\n//     public updateStepItem(step,index, order, time, status) {\r\n//         // this.showToCall[order._id][this.stepdata[order._id].step] = false;\r\n//         let m = time - 1;\r\n//         let seconds = time * 60;\r\n//         let w = parseFloat((100 / seconds).toFixed(2));\r\n//         let timeInterval = 1000;\r\n//         let t = 0;\r\n//         let s = 60;\r\n//         // console.log(this.stepdata[order._id].step.replace(' ', '')+order._id+index);\r\n//         console.log(step.replace(' ', '')+order._id+index);        \r\n//         var width = 0;\r\n//         var id = setInterval(() => {\r\n//             t = t + 1;\r\n//             seconds = seconds - 1;\r\n//             s = s - 1;\r\n//             if (seconds == 0) {\r\n//                 console.log(seconds, 'seconds');\r\n//                 clearInterval(id);\r\n//                 let items = [];\r\n//                 for (let i = 0; i < order.item.length; i++) {\r\n//                     for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n//                         if (((order.item[i].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(order.item[i].category)) > -1)) {\r\n//                             // if (order.item[i].step == this.stepdata[order._id].step) {\r\n//                             if (order.item[i].step == step) {                                \r\n//                                 order.item[i].status = status;\r\n//                                 if (items.indexOf(order.item[i].id._id) < 0) {\r\n//                                     items.push(order.item[i].id._id)\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 }\r\n//                 let opts = {\r\n//                     status: 5,\r\n//                     itemId: items,\r\n//                     // step: this.stepdata[order._id].step\r\n//                     step: step\r\n                    \r\n//                 };\r\n//                 this.websocketService.updateOrder(order._id, opts).then(data => {\r\n//                     for (let i = 0; i < this.orders.length; i++) {\r\n//                         if (this.orders[i]._id == data.data._id) {\r\n//                             this.orders[i].step = data.data.step;\r\n//                         }\r\n//                     }\r\n//                     console.log('this.orders', this.orders);\r\n//                 }).catch(error => {\r\n//                     console.log(\"error\", error);\r\n//                 });\r\n//             } else {\r\n//                 width = width + w;\r\n//                 if (width < 100) {\r\n//                     // this.barWidth[this.stepdata[order._id].step.replace(' ', '')+order._id+index] = width + '%';\r\n//                     this.barWidth[step.replace(' ', '')+order._id+index] = width + '%';                \r\n//                 } else {\r\n//                     // this.barWidth[this.stepdata[order._id].step.replace(' ', '')+order._id+index] = '100%';\r\n//                     this.barWidth[step.replace(' ', '')+order._id+index] = '100%';                    \r\n//                 }\r\n//             }\r\n//             if (t == 60) {\r\n//                 t = 0;\r\n//                 if(m==0) {\r\n//                     m = 0;\r\n//                     s = 0;\r\n//                 } else {\r\n//                     m = m-1;\r\n//                     s = 60;\r\n//                 }\r\n//             }\r\n//             var minutes = m;\r\n//             // this.remainingTime[order._id][this.stepdata[order._id].step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n//             this.remainingTime[order._id][step] = (minutes < 10 ? ('0' + minutes) : minutes) + \":\" + (s < 10 ? ('0' + s) : s);\r\n     \r\n//         }, timeInterval);\r\n\r\n//         let items = [];\r\n//         for (let i = 0; i < order.item.length; i++) {\r\n//             for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n//                 if (((order.item[i].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(order.item[i].category)) > -1)) {\r\n//                     // if (order.item[i].step == this.stepdata[order._id].step) {\r\n//                     if (order.item[i].step == step) {                        \r\n//                         order.item[i].status = status;\r\n//                         if (items.indexOf(order.item[i].id._id) < 0) {\r\n//                             items.push(order.item[i].id._id)\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n//         let opts = {\r\n//             status: status,\r\n//             itemId: items,\r\n//             // step: this.stepdata[order._id].step\r\n//             step: step            \r\n//         };\r\n//         this.websocketService.updateOrder(order._id, opts).then(data => {\r\n//             console.log(\"update step Item dept item updated+++++++++++++\", data);\r\n//             order.step = data.data.step;\r\n//             // for (let i = 0; i < this.orders.length; i++) {\r\n//             //     if (this.orders[i]._id == data.data._id) {\r\n//             //         this.orders[i].step = data.data.step;\r\n//             //     }\r\n//                 // if(this.orders[i].step){\r\n//                 //     for(let j=0;j<this.orders[i].step.length;j++){\r\n//                 //         if(this.orders[i]._id == order._id && this.orders[i].step[j].status == 1){\r\n//                 //             let temparray = this.orders[i].step[j].step.split(' ');\r\n//                 //             let tabTemp = temparray[1];\r\n//                 //             let stepTemp = temparray[0]+' '+Number(temparray[1])+1;\r\n//                 //             let temp = {\r\n//                 //                 tab: tabTemp,\r\n//                 //                 step: stepTemp,\r\n//                 //             }\r\n//                 //             this.stepdata[this.orders[i]._id] = temp;\r\n//                 //             console.log('this.stepdata',this.stepdata);\r\n//                 //         }\r\n//                 //     }\r\n//                 // }\r\n//             // }\r\n//             console.log('this.orders', this.orders);\r\n//         }).catch(error => {\r\n//             console.log(\"error\", error);\r\n//         });\r\n//     };\r\n\r\n//     // selectedTab(step, tab, orderId) {\r\n//     //     let temp = {\r\n//     //         tab: tab,\r\n//     //         step: step\r\n//     //     }\r\n//     //     this.stepdata[orderId] = temp;        \r\n//     // }\r\n\r\n\r\n//     selectedTab(step, index, order) {\r\n//         step.active = true;\r\n//         for (let i = 0; i < order.step.length; i++) {\r\n//             if (i != index) {\r\n//                 order.step[i].active = false;\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     // public updateDeliveredOrder(order) {\r\n//     //     console.log(order, 'order ++++++');\r\n//     //     let items = [];\r\n//     //     for (let i = 0; i < order.item.length; i++) {\r\n//     //         for (let k = 0; k < this.authGuard.getCurrentUser().category.length; k++) {\r\n//     //             if (((order.item[i].department.indexOf(this.authGuard.getCurrentUser()._id)) > -1) || ((this.authGuard.getCurrentUser().category.indexOf(order.item[i].category)) > -1)) {\r\n//     //                 if (order.item[i].step == this.stepdata[order._id].step) {\r\n//     //                     items.push(order.item[i].id._id)\r\n//     //                 }\r\n//     //             }\r\n//     //         }\r\n//     //     }\r\n//     //     let opts = {\r\n//     //         step: this.stepdata[order._id].step,\r\n//     //         item: items\r\n//     //     };\r\n//     //     this.websocketService.updateDeliveredOrder(order._id, opts).then(data => {\r\n//     //         console.log(\"updateDeliveredOrder dept Order updated++++++++++++++++\", data);\r\n//     //         // this.showToCall[order._id][this.stepdata[order._id].step] = true;\r\n//     //         // this.showDeliveredButton[order._id][this.stepdata[order._id].step] = false;\r\n//     //     }).catch(error => {\r\n//     //         console.log(\"error\", error);\r\n//     //     });\r\n//     // };\r\n// }\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.component.ts","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { OrderListComponent } from './order-list.component';\r\nimport { OrderListRouting } from './order-list.routes';\r\nimport { OrderListService } from './order-list.service';\r\nimport { WebsocketService } from '../../../service/websocket.service';\r\nimport { OrderByPipe } from '../../orderby';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OrderListRouting\r\n  ],\r\n  declarations: [OrderListComponent, OrderByPipe],\r\n  providers: [\r\n    WebsocketService,\r\n    OrderListService\r\n  ],\r\n})\r\nexport class OrderListModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.module.ts","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { OrderListComponent } from './order-list.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: OrderListComponent }\r\n];\r\n\r\n\r\nexport const OrderListRouting: ModuleWithProviders = RouterModule.forChild(routes); \r\n\n\n\n// WEBPACK FOOTER //\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.routes.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable, Subject } from 'rxjs/Rx';\r\n@Injectable()\r\nexport class OrderListService {\r\n  orderList = [];\r\n  constructor(private http: Http) { \r\n    let url = '/api/department/orders';\r\n    this.http.get(url).toPromise()\r\n      .then(data => {\r\n        let res = data.json();\r\n        this.orderList = res.data;\r\n      })\r\n      .catch(error => {\r\n        this.orderList = [];\r\n      });\r\n  }\r\n\r\n  setOrder(data) {\r\n    this.orderList.push(data);\r\n  }\r\n\r\n  public extractData(res: Response) {\r\n    let body = res.json();\r\n    if (body.hasOwnProperty('error')) {\r\n      if (body.error.message === 'Token is required') {\r\n        this.logout();\r\n      } else {\r\n        return Promise.resolve(body || {});\r\n      }\r\n    } else {\r\n      return Promise.resolve(body || {});\r\n    }\r\n  }\r\n\r\n  private handleErrorPromise(error: Response | any) {\r\n    let body = error.json();\r\n    if (error.status === 400 || error.status === 401) {\r\n      return Promise.reject(body.message || error);\r\n    }\r\n    else {\r\n      this.logout();\r\n    }\r\n  }\r\n\r\n  private logout() {\r\n    localStorage.removeItem('isLoggedin');\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('token');\r\n    document.cookie = \"token=\" + '';\r\n    window.location.href = '/';\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/department/order-list/order-list.service.ts","//The pipe class implements the PipeTransform interface's transform method that accepts an input value and an optional array of parameters and returns the transformed value.\r\nimport { Pipe, PipeTransform } from \"@angular/core\";\r\n//We tell Angular that this is a pipe by applying the @Pipe decorator which we import from the core Angular library.\r\n@Pipe({\r\n    //The @Pipe decorator takes an object with a name property whose value is the pipe name that we'll use within a template expression. It must be a valid JavaScript identifier. Our pipe's name is orderby.\r\n    name: \"orderby\"\r\n})\r\nexport class OrderByPipe implements PipeTransform {\r\n    transform(array: Array<any>, args: string): Array<any> {\r\n        if (typeof args[0] === \"undefined\") {\r\n            return array;\r\n        }\r\n        let direction = args[0][0];\r\n        let column = args.replace('-','');\r\n        array.sort((a: any, b: any) => {\r\n            let left = Number(new Date(a[column]));\r\n            let right = Number(new Date(b[column]));\r\n            return (direction === \"-\") ? right - left : left - right;\r\n        });\r\n        return array;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/project/htdocs/Hirundo-new/web-hirundo/src/app/hirundo/orderby.ts"],"sourceRoot":"webpack:///"}